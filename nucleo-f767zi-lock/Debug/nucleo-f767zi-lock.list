
nucleo-f767zi-lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005818  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a70  08005a70  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08005a70  08005a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a78  08005a78  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a7c  08005a7c  00015a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  20000034  08005ab4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  08005ab4  0002074c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194ca  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a94  00000000  00000000  0003952c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0003bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  0003d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297b6  00000000  00000000  0003ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3db  00000000  00000000  000681ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105e08  00000000  00000000  000825c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001883d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ec8  00000000  00000000  00188424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000034 	.word	0x20000034
 8000214:	00000000 	.word	0x00000000
 8000218:	080059f8 	.word	0x080059f8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000038 	.word	0x20000038
 8000234:	080059f8 	.word	0x080059f8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <sendSPIdata>:
	int armed = 0; // if 0 false. true = 1



	void sendSPIdata(uint8_t data[], uint8_t byteSize)
	{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
		//clear the buffer
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); //MASTER RECLEAR, ACTIVE LOW - PIN 10
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	4814      	ldr	r0, [pc, #80]	; (80005a0 <sendSPIdata+0x64>)
 8000550:	f002 f824 	bl	800259c <HAL_GPIO_WritePin>

		//Disable the Outputs
		HAL_GPIO_WritePin(GPIOA , GPIO_PIN_6, GPIO_PIN_SET);		//OUT_EN, ACTIVE LOW - PIN 13
 8000554:	2201      	movs	r2, #1
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	4812      	ldr	r0, [pc, #72]	; (80005a4 <sendSPIdata+0x68>)
 800055a:	f002 f81f 	bl	800259c <HAL_GPIO_WritePin>

		//Open the Buffer for Transmission
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //MASTER RECLEAR, ACTIVE LOW - PIN 10
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000564:	480e      	ldr	r0, [pc, #56]	; (80005a0 <sendSPIdata+0x64>)
 8000566:	f002 f819 	bl	800259c <HAL_GPIO_WritePin>

		//transmit data
		HAL_SPI_Transmit(&hspi1, &data[0], byteSize, 10); //byteSize = 1
 800056a:	78fb      	ldrb	r3, [r7, #3]
 800056c:	b29a      	uxth	r2, r3
 800056e:	230a      	movs	r3, #10
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <sendSPIdata+0x6c>)
 8000574:	f003 fc67 	bl	8003e46 <HAL_SPI_Transmit>

		//Trigger Registers
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //register clk - pin 11
 8000578:	2201      	movs	r2, #1
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <sendSPIdata+0x68>)
 800057e:	f002 f80d 	bl	800259c <HAL_GPIO_WritePin>
		//HAL_Delay(10);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	4807      	ldr	r0, [pc, #28]	; (80005a4 <sendSPIdata+0x68>)
 8000588:	f002 f808 	bl	800259c <HAL_GPIO_WritePin>

		//Enable the Outputs
		HAL_GPIO_WritePin(GPIOA , GPIO_PIN_6 , GPIO_PIN_RESET); //OUT_EN, ACTIVE LOW - PIN 13
 800058c:	2200      	movs	r2, #0
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <sendSPIdata+0x68>)
 8000592:	f002 f803 	bl	800259c <HAL_GPIO_WritePin>
	}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	40020000 	.word	0x40020000
 80005a8:	200000ec 	.word	0x200000ec

080005ac <displayDigit>:
	int displayDigit(int num){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
		uint16_t cathode[4] = {0x8000,0x2000,0x1000,0x4000}; // (Pin 15)(Pin 13)(Pin 12)(Pin 14)
 80005b4:	4a34      	ldr	r2, [pc, #208]	; (8000688 <displayDigit+0xdc>)
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005be:	e883 0003 	stmia.w	r3, {r0, r1}
		int d[4];			// array that will sort one digit in each index
		int count =0;		// how many digits num contains
 80005c2:	2300      	movs	r3, #0
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24

		if(num == 0){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d126      	bne.n	800061a <displayDigit+0x6e>
			d[count] = 0;
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	3328      	adds	r3, #40	; 0x28
 80005d2:	443b      	add	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	f843 2c20 	str.w	r2, [r3, #-32]
			count = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
 80005de:	e01f      	b.n	8000620 <displayDigit+0x74>
		}
		//it will sort one digit in each index
		else{
			while(num != 0){
				d[count] = num%10;
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	4b2a      	ldr	r3, [pc, #168]	; (800068c <displayDigit+0xe0>)
 80005e4:	fb83 2301 	smull	r2, r3, r3, r1
 80005e8:	109a      	asrs	r2, r3, #2
 80005ea:	17cb      	asrs	r3, r1, #31
 80005ec:	1ad2      	subs	r2, r2, r3
 80005ee:	4613      	mov	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	1aca      	subs	r2, r1, r3
 80005f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	3328      	adds	r3, #40	; 0x28
 80005fe:	443b      	add	r3, r7
 8000600:	f843 2c20 	str.w	r2, [r3, #-32]
				count++;
 8000604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000606:	3301      	adds	r3, #1
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
				num=num/10;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a1f      	ldr	r2, [pc, #124]	; (800068c <displayDigit+0xe0>)
 800060e:	fb82 1203 	smull	r1, r2, r2, r3
 8000612:	1092      	asrs	r2, r2, #2
 8000614:	17db      	asrs	r3, r3, #31
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	607b      	str	r3, [r7, #4]
			while(num != 0){
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1df      	bne.n	80005e0 <displayDigit+0x34>
			}
		}

		// display up to four digits on the 4-digit 7-seg display
		for(int i = 0; i < count; i++){
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
 8000624:	e027      	b.n	8000676 <displayDigit+0xca>
			HAL_GPIO_WritePin(GPIOF, cathode[i], GPIO_PIN_RESET); 	// resets one cathode to GND
 8000626:	6a3b      	ldr	r3, [r7, #32]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	3328      	adds	r3, #40	; 0x28
 800062c:	443b      	add	r3, r7
 800062e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	4816      	ldr	r0, [pc, #88]	; (8000690 <displayDigit+0xe4>)
 8000638:	f001 ffb0 	bl	800259c <HAL_GPIO_WritePin>
			sendSPIdata(&SPIdata[d[i]], 1);							// send data to the register
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	3328      	adds	r3, #40	; 0x28
 8000642:	443b      	add	r3, r7
 8000644:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <displayDigit+0xe8>)
 800064a:	4413      	add	r3, r2
 800064c:	2101      	movs	r1, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff74 	bl	800053c <sendSPIdata>
			HAL_Delay(4);											// it shows that number for 4 ms
 8000654:	2004      	movs	r0, #4
 8000656:	f001 fa13 	bl	8001a80 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOF, cathode[i], GPIO_PIN_SET);		// sets the cathode
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	3328      	adds	r3, #40	; 0x28
 8000660:	443b      	add	r3, r7
 8000662:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	4809      	ldr	r0, [pc, #36]	; (8000690 <displayDigit+0xe4>)
 800066c:	f001 ff96 	bl	800259c <HAL_GPIO_WritePin>
		for(int i = 0; i < count; i++){
 8000670:	6a3b      	ldr	r3, [r7, #32]
 8000672:	3301      	adds	r3, #1
 8000674:	623b      	str	r3, [r7, #32]
 8000676:	6a3a      	ldr	r2, [r7, #32]
 8000678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067a:	429a      	cmp	r2, r3
 800067c:	dbd3      	blt.n	8000626 <displayDigit+0x7a>
		}
		return count;
 800067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8000680:	4618      	mov	r0, r3
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	08005a10 	.word	0x08005a10
 800068c:	66666667 	.word	0x66666667
 8000690:	40021400 	.word	0x40021400
 8000694:	20000000 	.word	0x20000000

08000698 <displayLetters>:
	int displayLetters(int num){
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
			uint16_t cathode[4] = {0x8000,0x2000,0x1000,0x4000}; // (Pin 15)(Pin 13)(Pin 12)(Pin 14)
 80006a0:	4a34      	ldr	r2, [pc, #208]	; (8000774 <displayLetters+0xdc>)
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006aa:	e883 0003 	stmia.w	r3, {r0, r1}
			int d[4];			// array that will sort one digit in each index
			int count =0;		// how many digits num contains
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24

			if(num == 0){
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d126      	bne.n	8000706 <displayLetters+0x6e>
				d[count] = 0;
 80006b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	3328      	adds	r3, #40	; 0x28
 80006be:	443b      	add	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	f843 2c20 	str.w	r2, [r3, #-32]
				count = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ca:	e01f      	b.n	800070c <displayLetters+0x74>
			}
			//it will sort one digit in each index
			else{
				while(num != 0){
					d[count] = num%10;
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <displayLetters+0xe0>)
 80006d0:	fb83 2301 	smull	r2, r3, r3, r1
 80006d4:	109a      	asrs	r2, r3, #2
 80006d6:	17cb      	asrs	r3, r1, #31
 80006d8:	1ad2      	subs	r2, r2, r3
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	1aca      	subs	r2, r1, r3
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	3328      	adds	r3, #40	; 0x28
 80006ea:	443b      	add	r3, r7
 80006ec:	f843 2c20 	str.w	r2, [r3, #-32]
					count++;
 80006f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f2:	3301      	adds	r3, #1
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
					num=num/10;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <displayLetters+0xe0>)
 80006fa:	fb82 1203 	smull	r1, r2, r2, r3
 80006fe:	1092      	asrs	r2, r2, #2
 8000700:	17db      	asrs	r3, r3, #31
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	607b      	str	r3, [r7, #4]
				while(num != 0){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1df      	bne.n	80006cc <displayLetters+0x34>
				}
			}

			// display up to four digits on the 4-digit 7-seg display
			for(int i = 0; i < count; i++){
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
 8000710:	e027      	b.n	8000762 <displayLetters+0xca>
				HAL_GPIO_WritePin(GPIOF, cathode[i], GPIO_PIN_RESET); 	// resets one cathode to GND
 8000712:	6a3b      	ldr	r3, [r7, #32]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	3328      	adds	r3, #40	; 0x28
 8000718:	443b      	add	r3, r7
 800071a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800071e:	2200      	movs	r2, #0
 8000720:	4619      	mov	r1, r3
 8000722:	4816      	ldr	r0, [pc, #88]	; (800077c <displayLetters+0xe4>)
 8000724:	f001 ff3a 	bl	800259c <HAL_GPIO_WritePin>
				sendSPIdata(&letters[d[i]], 1);							// send data to the register
 8000728:	6a3b      	ldr	r3, [r7, #32]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	3328      	adds	r3, #40	; 0x28
 800072e:	443b      	add	r3, r7
 8000730:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <displayLetters+0xe8>)
 8000736:	4413      	add	r3, r2
 8000738:	2101      	movs	r1, #1
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fefe 	bl	800053c <sendSPIdata>
				HAL_Delay(4);											// it shows that number for 4 ms
 8000740:	2004      	movs	r0, #4
 8000742:	f001 f99d 	bl	8001a80 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, cathode[i], GPIO_PIN_SET);		// sets the cathode
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	3328      	adds	r3, #40	; 0x28
 800074c:	443b      	add	r3, r7
 800074e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <displayLetters+0xe4>)
 8000758:	f001 ff20 	bl	800259c <HAL_GPIO_WritePin>
			for(int i = 0; i < count; i++){
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	3301      	adds	r3, #1
 8000760:	623b      	str	r3, [r7, #32]
 8000762:	6a3a      	ldr	r2, [r7, #32]
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	429a      	cmp	r2, r3
 8000768:	dbd3      	blt.n	8000712 <displayLetters+0x7a>
			}
			return count;
 800076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		}
 800076c:	4618      	mov	r0, r3
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	08005a10 	.word	0x08005a10
 8000778:	66666667 	.word	0x66666667
 800077c:	40021400 	.word	0x40021400
 8000780:	2000000c 	.word	0x2000000c

08000784 <displayPassword>:
	void displayPassword(int num, int press){
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
		uint16_t cathode[4] = {0x8000,0x2000,0x1000,0x4000};
 800078e:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <displayPassword+0x80>)
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000798:	e883 0003 	stmia.w	r3, {r0, r1}
		int count = displayDigit(num);				// count = 3
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff05 	bl	80005ac <displayDigit>
 80007a2:	6138      	str	r0, [r7, #16]

		for(int i = 0; i < press; i++){
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	e023      	b.n	80007f2 <displayPassword+0x6e>
			if(count - 1 < i){
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	dc1c      	bgt.n	80007ec <displayPassword+0x68>
				HAL_GPIO_WritePin(GPIOF, cathode[i], GPIO_PIN_RESET);
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	3318      	adds	r3, #24
 80007b8:	443b      	add	r3, r7
 80007ba:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <displayPassword+0x84>)
 80007c4:	f001 feea 	bl	800259c <HAL_GPIO_WritePin>
				sendSPIdata(&SPIdata[0], 1);
 80007c8:	2101      	movs	r1, #1
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <displayPassword+0x88>)
 80007cc:	f7ff feb6 	bl	800053c <sendSPIdata>
				HAL_Delay(4);
 80007d0:	2004      	movs	r0, #4
 80007d2:	f001 f955 	bl	8001a80 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOF, cathode[i], GPIO_PIN_SET);
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	3318      	adds	r3, #24
 80007dc:	443b      	add	r3, r7
 80007de:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <displayPassword+0x84>)
 80007e8:	f001 fed8 	bl	800259c <HAL_GPIO_WritePin>
		for(int i = 0; i < press; i++){
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	3301      	adds	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	dbd7      	blt.n	80007aa <displayPassword+0x26>
			}
		}


	}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08005a10 	.word	0x08005a10
 8000808:	40021400 	.word	0x40021400
 800080c:	20000000 	.word	0x20000000

08000810 <checkColumn>:
	int checkColumn(uint16_t pinVar){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
			int num;
			HAL_GPIO_WritePin(GPIOE, C1_Pin|C2_Pin|C3_Pin|C4_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f24d 0108 	movw	r1, #53256	; 0xd008
 8000820:	482e      	ldr	r0, [pc, #184]	; (80008dc <checkColumn+0xcc>)
 8000822:	f001 febb 	bl	800259c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE,C1_Pin,GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2108      	movs	r1, #8
 800082a:	482c      	ldr	r0, [pc, #176]	; (80008dc <checkColumn+0xcc>)
 800082c:	f001 feb6 	bl	800259c <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(GPIOE,pinVar) == 1)
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	4619      	mov	r1, r3
 8000834:	4829      	ldr	r0, [pc, #164]	; (80008dc <checkColumn+0xcc>)
 8000836:	f001 fe99 	bl	800256c <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d101      	bne.n	8000844 <checkColumn+0x34>
				num = 1;
 8000840:	2301      	movs	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]

			HAL_GPIO_WritePin(GPIOE,C1_Pin,GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2108      	movs	r1, #8
 8000848:	4824      	ldr	r0, [pc, #144]	; (80008dc <checkColumn+0xcc>)
 800084a:	f001 fea7 	bl	800259c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,C2_Pin,GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000854:	4821      	ldr	r0, [pc, #132]	; (80008dc <checkColumn+0xcc>)
 8000856:	f001 fea1 	bl	800259c <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(GPIOE,pinVar) == 1)
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	4619      	mov	r1, r3
 800085e:	481f      	ldr	r0, [pc, #124]	; (80008dc <checkColumn+0xcc>)
 8000860:	f001 fe84 	bl	800256c <HAL_GPIO_ReadPin>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d101      	bne.n	800086e <checkColumn+0x5e>
				num = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	60fb      	str	r3, [r7, #12]

			HAL_GPIO_WritePin(GPIOE,C2_Pin,GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000874:	4819      	ldr	r0, [pc, #100]	; (80008dc <checkColumn+0xcc>)
 8000876:	f001 fe91 	bl	800259c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,C3_Pin,GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000880:	4816      	ldr	r0, [pc, #88]	; (80008dc <checkColumn+0xcc>)
 8000882:	f001 fe8b 	bl	800259c <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(GPIOE,pinVar) == 1)
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	4619      	mov	r1, r3
 800088a:	4814      	ldr	r0, [pc, #80]	; (80008dc <checkColumn+0xcc>)
 800088c:	f001 fe6e 	bl	800256c <HAL_GPIO_ReadPin>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d101      	bne.n	800089a <checkColumn+0x8a>
				num = 3;
 8000896:	2303      	movs	r3, #3
 8000898:	60fb      	str	r3, [r7, #12]

			HAL_GPIO_WritePin(GPIOE,C3_Pin,GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a0:	480e      	ldr	r0, [pc, #56]	; (80008dc <checkColumn+0xcc>)
 80008a2:	f001 fe7b 	bl	800259c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,C4_Pin,GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <checkColumn+0xcc>)
 80008ae:	f001 fe75 	bl	800259c <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(GPIOE,pinVar) == 1)
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4809      	ldr	r0, [pc, #36]	; (80008dc <checkColumn+0xcc>)
 80008b8:	f001 fe58 	bl	800256c <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d101      	bne.n	80008c6 <checkColumn+0xb6>
				num = 4;
 80008c2:	2304      	movs	r3, #4
 80008c4:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(GPIOE, C1_Pin|C2_Pin|C3_Pin|C4_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f24d 0108 	movw	r1, #53256	; 0xd008
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <checkColumn+0xcc>)
 80008ce:	f001 fe65 	bl	800259c <HAL_GPIO_WritePin>
			return num;
 80008d2:	68fb      	ldr	r3, [r7, #12]
		}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000

080008e0 <keyPress>:
	int keyPress(void){
 80008e0:	b5b0      	push	{r4, r5, r7, lr}
 80008e2:	b092      	sub	sp, #72	; 0x48
 80008e4:	af00      	add	r7, sp, #0
		int columnVar;
		int keyArr[] = {1,2,3,11,4,5,6,12,7,8,9,13,16,0,15,14}; //0-9 = 0-9, A-D = 11-14, #-* = 15-16
 80008e6:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <keyPress+0xc4>)
 80008e8:	1d3c      	adds	r4, r7, #4
 80008ea:	461d      	mov	r5, r3
 80008ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == 1){		// row 1
 8000900:	2104      	movs	r1, #4
 8000902:	4829      	ldr	r0, [pc, #164]	; (80009a8 <keyPress+0xc8>)
 8000904:	f001 fe32 	bl	800256c <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d10b      	bne.n	8000926 <keyPress+0x46>
			columnVar = checkColumn(GPIO_PIN_2);
 800090e:	2004      	movs	r0, #4
 8000910:	f7ff ff7e 	bl	8000810 <checkColumn>
 8000914:	6478      	str	r0, [r7, #68]	; 0x44
			return keyArr[columnVar - 1];
 8000916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000918:	3b01      	subs	r3, #1
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	3348      	adds	r3, #72	; 0x48
 800091e:	443b      	add	r3, r7
 8000920:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000924:	e03a      	b.n	800099c <keyPress+0xbc>
		}
		else if(HAL_GPIO_ReadPin(GPIOE, R2_Pin) == 1){		// row 2
 8000926:	2110      	movs	r1, #16
 8000928:	481f      	ldr	r0, [pc, #124]	; (80009a8 <keyPress+0xc8>)
 800092a:	f001 fe1f 	bl	800256c <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	2b01      	cmp	r3, #1
 8000932:	d10b      	bne.n	800094c <keyPress+0x6c>
			columnVar = checkColumn(R2_Pin);
 8000934:	2010      	movs	r0, #16
 8000936:	f7ff ff6b 	bl	8000810 <checkColumn>
 800093a:	6478      	str	r0, [r7, #68]	; 0x44
			return keyArr[columnVar +3];
 800093c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800093e:	3303      	adds	r3, #3
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	3348      	adds	r3, #72	; 0x48
 8000944:	443b      	add	r3, r7
 8000946:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800094a:	e027      	b.n	800099c <keyPress+0xbc>
		}
		else if(HAL_GPIO_ReadPin(GPIOE, R3_Pin) == 1){		// row 3
 800094c:	2120      	movs	r1, #32
 800094e:	4816      	ldr	r0, [pc, #88]	; (80009a8 <keyPress+0xc8>)
 8000950:	f001 fe0c 	bl	800256c <HAL_GPIO_ReadPin>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d10b      	bne.n	8000972 <keyPress+0x92>
			columnVar = checkColumn(R3_Pin);
 800095a:	2020      	movs	r0, #32
 800095c:	f7ff ff58 	bl	8000810 <checkColumn>
 8000960:	6478      	str	r0, [r7, #68]	; 0x44
			return keyArr[columnVar +7];
 8000962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000964:	3307      	adds	r3, #7
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	3348      	adds	r3, #72	; 0x48
 800096a:	443b      	add	r3, r7
 800096c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000970:	e014      	b.n	800099c <keyPress+0xbc>
		}
		else if(HAL_GPIO_ReadPin(GPIOE, R4_Pin) == 1){		// row 4
 8000972:	2140      	movs	r1, #64	; 0x40
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <keyPress+0xc8>)
 8000976:	f001 fdf9 	bl	800256c <HAL_GPIO_ReadPin>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d10b      	bne.n	8000998 <keyPress+0xb8>
			columnVar = checkColumn(R4_Pin);
 8000980:	2040      	movs	r0, #64	; 0x40
 8000982:	f7ff ff45 	bl	8000810 <checkColumn>
 8000986:	6478      	str	r0, [r7, #68]	; 0x44
			return keyArr[columnVar +11];
 8000988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800098a:	330b      	adds	r3, #11
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	3348      	adds	r3, #72	; 0x48
 8000990:	443b      	add	r3, r7
 8000992:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000996:	e001      	b.n	800099c <keyPress+0xbc>
		}
		return -1;
 8000998:	f04f 33ff 	mov.w	r3, #4294967295
	}
 800099c:	4618      	mov	r0, r3
 800099e:	3748      	adds	r7, #72	; 0x48
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bdb0      	pop	{r4, r5, r7, pc}
 80009a4:	08005a18 	.word	0x08005a18
 80009a8:	40021000 	.word	0x40021000
 80009ac:	00000000 	.word	0x00000000

080009b0 <getDistance>:

	uint16_t getDistance(){
 80009b0:	b598      	push	{r3, r4, r7, lr}
 80009b2:	af00      	add	r7, sp, #0
		HAL_TIM_Base_Start(&htim1);
 80009b4:	483a      	ldr	r0, [pc, #232]	; (8000aa0 <getDistance+0xf0>)
 80009b6:	f003 fd95 	bl	80044e4 <HAL_TIM_Base_Start>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	4839      	ldr	r0, [pc, #228]	; (8000aa4 <getDistance+0xf4>)
 80009c0:	f001 fdec 	bl	800259c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80009c4:	2201      	movs	r2, #1
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	4836      	ldr	r0, [pc, #216]	; (8000aa4 <getDistance+0xf4>)
 80009ca:	f001 fde7 	bl	800259c <HAL_GPIO_WritePin>
			  	     __HAL_TIM_SET_COUNTER(&htim1, 0);
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <getDistance+0xf0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
			  	     while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 80009d6:	bf00      	nop
 80009d8:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <getDistance+0xf0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009de:	2b09      	cmp	r3, #9
 80009e0:	d9fa      	bls.n	80009d8 <getDistance+0x28>
			  	     HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);  // pull the TRIG pin low
 80009e2:	2200      	movs	r2, #0
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	482f      	ldr	r0, [pc, #188]	; (8000aa4 <getDistance+0xf4>)
 80009e8:	f001 fdd8 	bl	800259c <HAL_GPIO_WritePin>

			  	     pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80009ec:	f001 f83c 	bl	8001a68 <HAL_GetTick>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a2d      	ldr	r2, [pc, #180]	; (8000aa8 <getDistance+0xf8>)
 80009f4:	6013      	str	r3, [r2, #0]
			  	     // wait for the echo pin to go high
			  	     while (!(HAL_GPIO_ReadPin (GPIOF, GPIO_PIN_9)) && pMillis + 10 >  HAL_GetTick());
 80009f6:	bf00      	nop
 80009f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fc:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <getDistance+0xf4>)
 80009fe:	f001 fdb5 	bl	800256c <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d108      	bne.n	8000a1a <getDistance+0x6a>
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <getDistance+0xf8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f103 040a 	add.w	r4, r3, #10
 8000a10:	f001 f82a 	bl	8001a68 <HAL_GetTick>
 8000a14:	4603      	mov	r3, r0
 8000a16:	429c      	cmp	r4, r3
 8000a18:	d8ee      	bhi.n	80009f8 <getDistance+0x48>
			  	     Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <getDistance+0xf0>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a20:	4a22      	ldr	r2, [pc, #136]	; (8000aac <getDistance+0xfc>)
 8000a22:	6013      	str	r3, [r2, #0]

			  	     pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000a24:	f001 f820 	bl	8001a68 <HAL_GetTick>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <getDistance+0xf8>)
 8000a2c:	6013      	str	r3, [r2, #0]
			  	     // wait for the echo pin to go low
			  	     while ((HAL_GPIO_ReadPin (GPIOF, GPIO_PIN_9)) && pMillis + 50 > HAL_GetTick());
 8000a2e:	bf00      	nop
 8000a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a34:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <getDistance+0xf4>)
 8000a36:	f001 fd99 	bl	800256c <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d008      	beq.n	8000a52 <getDistance+0xa2>
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <getDistance+0xf8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000a48:	f001 f80e 	bl	8001a68 <HAL_GetTick>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	429c      	cmp	r4, r3
 8000a50:	d8ee      	bhi.n	8000a30 <getDistance+0x80>
			  	     Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <getDistance+0xf0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a58:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <getDistance+0x100>)
 8000a5a:	6013      	str	r3, [r2, #0]

			  	     Distance = (Value2-Value1)* 0.034/2;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <getDistance+0x100>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <getDistance+0xfc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	ee07 3a90 	vmov	s15, r3
 8000a6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a6e:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000a98 <getDistance+0xe8>
 8000a72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000a7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a82:	ee17 3a90 	vmov	r3, s15
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <getDistance+0x104>)
 8000a8a:	801a      	strh	r2, [r3, #0]
			  	     return Distance;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <getDistance+0x104>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
	}
 8000a90:	4618      	mov	r0, r3
 8000a92:	bd98      	pop	{r3, r4, r7, pc}
 8000a94:	f3af 8000 	nop.w
 8000a98:	b020c49c 	.word	0xb020c49c
 8000a9c:	3fa16872 	.word	0x3fa16872
 8000aa0:	20000150 	.word	0x20000150
 8000aa4:	40021400 	.word	0x40021400
 8000aa8:	2000072c 	.word	0x2000072c
 8000aac:	20000730 	.word	0x20000730
 8000ab0:	20000734 	.word	0x20000734
 8000ab4:	20000738 	.word	0x20000738

08000ab8 <IdleStateHandler>:
/*Prototype Event Handlers*/
	eSystemState IdleStateHandler(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
		if(armed == 1){
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <IdleStateHandler+0x6c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d106      	bne.n	8000ad2 <IdleStateHandler+0x1a>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aca:	4817      	ldr	r0, [pc, #92]	; (8000b28 <IdleStateHandler+0x70>)
 8000acc:	f001 fd66 	bl	800259c <HAL_GPIO_WritePin>
 8000ad0:	e005      	b.n	8000ade <IdleStateHandler+0x26>
		}
		else{
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <IdleStateHandler+0x70>)
 8000ada:	f001 fd5f 	bl	800259c <HAL_GPIO_WritePin>
		}
		if(numPress > 0)
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <IdleStateHandler+0x74>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	dd07      	ble.n	8000af6 <IdleStateHandler+0x3e>
			displayPassword(buffer,numPress);
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <IdleStateHandler+0x78>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <IdleStateHandler+0x74>)
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fe47 	bl	8000784 <displayPassword>
		//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
		// displayLetters(3422);
		if(keyPress() != -1)
 8000af6:	f7ff fef3 	bl	80008e0 <keyPress>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d001      	beq.n	8000b06 <IdleStateHandler+0x4e>
			return Key_Press_State;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00b      	b.n	8000b1e <IdleStateHandler+0x66>
			//return Idle_State;
		if(armed == 1){
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <IdleStateHandler+0x6c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d106      	bne.n	8000b1c <IdleStateHandler+0x64>
			if(getDistance() < 30){
 8000b0e:	f7ff ff4f 	bl	80009b0 <getDistance>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b1d      	cmp	r3, #29
 8000b16:	d801      	bhi.n	8000b1c <IdleStateHandler+0x64>
				return Sound_Alarm_State;
 8000b18:	2305      	movs	r3, #5
 8000b1a:	e000      	b.n	8000b1e <IdleStateHandler+0x66>
			}
		}
		//return Key_Press_State;
		return Idle_State;
 8000b1c:	2300      	movs	r3, #0
	}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000744 	.word	0x20000744
 8000b28:	40021800 	.word	0x40021800
 8000b2c:	2000073c 	.word	0x2000073c
 8000b30:	20000740 	.word	0x20000740

08000b34 <KeyPressHandler>:
	eSystemState KeyPressHandler(void){ 		// 0-9 = 0-9, A-D = 11-14, #-* = 15-16
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
		int num = keyPress();
 8000b3a:	f7ff fed1 	bl	80008e0 <keyPress>
 8000b3e:	6078      	str	r0, [r7, #4]
		switch (num){
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b0d      	cmp	r3, #13
 8000b44:	d028      	beq.n	8000b98 <KeyPressHandler+0x64>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0d      	cmp	r3, #13
 8000b4a:	dc31      	bgt.n	8000bb0 <KeyPressHandler+0x7c>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b0b      	cmp	r3, #11
 8000b50:	d003      	beq.n	8000b5a <KeyPressHandler+0x26>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0c      	cmp	r3, #12
 8000b56:	d006      	beq.n	8000b66 <KeyPressHandler+0x32>
 8000b58:	e02a      	b.n	8000bb0 <KeyPressHandler+0x7c>

		case 11:								// 11 = A, This is enter
			HAL_Delay(500);
 8000b5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5e:	f000 ff8f 	bl	8001a80 <HAL_Delay>
			return Check_Password_State;
 8000b62:	2302      	movs	r3, #2
 8000b64:	e040      	b.n	8000be8 <KeyPressHandler+0xb4>

		case 12:								// 12 = B, This is backspace
				if(numPress > 0){
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <KeyPressHandler+0xbc>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dd0e      	ble.n	8000b8c <KeyPressHandler+0x58>
					buffer = buffer / 10;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <KeyPressHandler+0xc0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <KeyPressHandler+0xc4>)
 8000b74:	fb82 1203 	smull	r1, r2, r2, r3
 8000b78:	1092      	asrs	r2, r2, #2
 8000b7a:	17db      	asrs	r3, r3, #31
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <KeyPressHandler+0xc0>)
 8000b80:	6013      	str	r3, [r2, #0]
					numPress--;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <KeyPressHandler+0xbc>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <KeyPressHandler+0xbc>)
 8000b8a:	6013      	str	r3, [r2, #0]
				}
				HAL_Delay(500);
 8000b8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b90:	f000 ff76 	bl	8001a80 <HAL_Delay>
				return Idle_State;
 8000b94:	2300      	movs	r3, #0
 8000b96:	e027      	b.n	8000be8 <KeyPressHandler+0xb4>

		case 13:								// 13 = C, This is clear
			buffer = 0;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <KeyPressHandler+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
			numPress = 0;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <KeyPressHandler+0xbc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
			HAL_Delay(500);
 8000ba4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba8:	f000 ff6a 	bl	8001a80 <HAL_Delay>
			return Idle_State;
 8000bac:	2300      	movs	r3, #0
 8000bae:	e01b      	b.n	8000be8 <KeyPressHandler+0xb4>

		default:								// 0 - 9 was pressed
			if(numPress < 4 && num < 10){
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <KeyPressHandler+0xbc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	dc12      	bgt.n	8000bde <KeyPressHandler+0xaa>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b09      	cmp	r3, #9
 8000bbc:	dc0f      	bgt.n	8000bde <KeyPressHandler+0xaa>
				buffer = buffer * 10 + num;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <KeyPressHandler+0xc0>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	461a      	mov	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <KeyPressHandler+0xc0>)
 8000bd2:	6013      	str	r3, [r2, #0]
				numPress++;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <KeyPressHandler+0xbc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <KeyPressHandler+0xbc>)
 8000bdc:	6013      	str	r3, [r2, #0]
			}
			HAL_Delay(500);
 8000bde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be2:	f000 ff4d 	bl	8001a80 <HAL_Delay>
			return Idle_State;
 8000be6:	2300      	movs	r3, #0
		}
	}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000073c 	.word	0x2000073c
 8000bf4:	20000740 	.word	0x20000740
 8000bf8:	66666667 	.word	0x66666667

08000bfc <CheckPasswordHandler>:
	eSystemState CheckPasswordHandler(void){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
		if(buffer == password)
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <CheckPasswordHandler+0x20>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <CheckPasswordHandler+0x24>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d101      	bne.n	8000c10 <CheckPasswordHandler+0x14>
			return Correct_Password_State;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	e000      	b.n	8000c12 <CheckPasswordHandler+0x16>
		return Incorrect_Password_State;
 8000c10:	2303      	movs	r3, #3
	}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	20000740 	.word	0x20000740
 8000c20:	20000024 	.word	0x20000024

08000c24 <IncorrectPasswordHandler>:
	eSystemState IncorrectPasswordHandler(void){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
		buffer = 0;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <IncorrectPasswordHandler+0x38>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
		numPress = 0;
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <IncorrectPasswordHandler+0x3c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
		 * TURN ON RED LED
		 * DELAY .5 SEC
		 * TURN OFF RED LED
		 *
		 */
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 1);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3a:	480a      	ldr	r0, [pc, #40]	; (8000c64 <IncorrectPasswordHandler+0x40>)
 8000c3c:	f001 fcae 	bl	800259c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000c40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c44:	f000 ff1c 	bl	8001a80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <IncorrectPasswordHandler+0x40>)
 8000c50:	f001 fca4 	bl	800259c <HAL_GPIO_WritePin>

		return Idle_State;
 8000c54:	2300      	movs	r3, #0
	}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000740 	.word	0x20000740
 8000c60:	2000073c 	.word	0x2000073c
 8000c64:	40021800 	.word	0x40021800

08000c68 <CorrectPasswordHandler>:
	eSystemState CorrectPasswordHandler(void){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
		buffer = 0;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <CorrectPasswordHandler+0x38>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
		numPress = 0;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <CorrectPasswordHandler+0x3c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7e:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <CorrectPasswordHandler+0x40>)
 8000c80:	f001 fc8c 	bl	800259c <HAL_GPIO_WritePin>
		if(armed == 1)
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <CorrectPasswordHandler+0x44>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d103      	bne.n	8000c94 <CorrectPasswordHandler+0x2c>
			armed = 0;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <CorrectPasswordHandler+0x44>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	e002      	b.n	8000c9a <CorrectPasswordHandler+0x32>
		else
			armed = 1;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <CorrectPasswordHandler+0x44>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
		return Idle_State;
 8000c9a:	2300      	movs	r3, #0
	}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000740 	.word	0x20000740
 8000ca4:	2000073c 	.word	0x2000073c
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	20000744 	.word	0x20000744

08000cb0 <SoundAlarmHandler>:
	eSystemState SoundAlarmHandler(void){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <SoundAlarmHandler+0x18>)
 8000cbc:	f001 fc6e 	bl	800259c <HAL_GPIO_WritePin>
		return Idle_State;
 8000cc0:	2300      	movs	r3, #0
	}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd2:	f000 fe78 	bl	80019c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd6:	f000 f853 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f000 fa3b 	bl	8001154 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cde:	f000 f9db 	bl	8001098 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ce2:	f000 fa09 	bl	80010f8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000ce6:	f000 f945 	bl	8000f74 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000cea:	f000 f8b1 	bl	8000e50 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cee:	f000 f901 	bl	8000ef4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000cf2:	f000 f97d 	bl	8000ff0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  eSystemState eNextState = Idle_State;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	71fb      	strb	r3, [r7, #7]
		  break;
	  }
	  displayDigit(getDistance());

   */
  	HAL_TIM_Base_Start(&htim1);
 8000cfa:	4820      	ldr	r0, [pc, #128]	; (8000d7c <main+0xb0>)
 8000cfc:	f003 fbf2 	bl	80044e4 <HAL_TIM_Base_Start>
  	while(HAL_GetTick() < 4000){
 8000d00:	e003      	b.n	8000d0a <main+0x3e>
  		displayLetters(3422);
 8000d02:	f640 505e 	movw	r0, #3422	; 0xd5e
 8000d06:	f7ff fcc7 	bl	8000698 <displayLetters>
  	while(HAL_GetTick() < 4000){
 8000d0a:	f000 fead 	bl	8001a68 <HAL_GetTick>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d14:	d3f5      	bcc.n	8000d02 <main+0x36>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  switch(eNextState){
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d8fc      	bhi.n	8000d16 <main+0x4a>
 8000d1c:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <main+0x58>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d3d 	.word	0x08000d3d
 8000d28:	08000d47 	.word	0x08000d47
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000d5b 	.word	0x08000d5b
 8000d34:	08000d65 	.word	0x08000d65
 8000d38:	08000d6f 	.word	0x08000d6f
	  	  case Idle_State:
	  		  eNextState = IdleStateHandler();
 8000d3c:	f7ff febc 	bl	8000ab8 <IdleStateHandler>
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8000d44:	e018      	b.n	8000d78 <main+0xac>
	  	  case Key_Press_State:
	  		  eNextState = KeyPressHandler();
 8000d46:	f7ff fef5 	bl	8000b34 <KeyPressHandler>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8000d4e:	e013      	b.n	8000d78 <main+0xac>
	  	  case Check_Password_State:
	  		  eNextState = CheckPasswordHandler();
 8000d50:	f7ff ff54 	bl	8000bfc <CheckPasswordHandler>
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8000d58:	e00e      	b.n	8000d78 <main+0xac>
	  	  case Incorrect_Password_State:
	  		  eNextState = IncorrectPasswordHandler();
 8000d5a:	f7ff ff63 	bl	8000c24 <IncorrectPasswordHandler>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8000d62:	e009      	b.n	8000d78 <main+0xac>
	  	  case Correct_Password_State:
	  		  eNextState = CorrectPasswordHandler();
 8000d64:	f7ff ff80 	bl	8000c68 <CorrectPasswordHandler>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8000d6c:	e004      	b.n	8000d78 <main+0xac>
	  	  case Sound_Alarm_State:
	  		  eNextState = SoundAlarmHandler();
 8000d6e:	f7ff ff9f 	bl	8000cb0 <SoundAlarmHandler>
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8000d76:	bf00      	nop
	  switch(eNextState){
 8000d78:	e7cd      	b.n	8000d16 <main+0x4a>
 8000d7a:	bf00      	nop
 8000d7c:	20000150 	.word	0x20000150

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b094      	sub	sp, #80	; 0x50
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	2234      	movs	r2, #52	; 0x34
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 fe2a 	bl	80059e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <SystemClock_Config+0xc8>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <SystemClock_Config+0xc8>)
 8000daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SystemClock_Config+0xc8>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <SystemClock_Config+0xcc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <SystemClock_Config+0xcc>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <SystemClock_Config+0xcc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de2:	2302      	movs	r3, #2
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000df0:	2390      	movs	r3, #144	; 0x90
 8000df2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000df8:	2306      	movs	r3, #6
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fe77 	bl	8002af8 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e10:	f000 fb42 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2102      	movs	r1, #2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 f90f 	bl	8003054 <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e3c:	f000 fb2c 	bl	8001498 <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3750      	adds	r7, #80	; 0x50
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e64:	4a21      	ldr	r2, [pc, #132]	; (8000eec <MX_ADC1_Init+0x9c>)
 8000e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e90:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <MX_ADC1_Init+0xa0>)
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eae:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000eb0:	f000 fe0a 	bl	8001ac8 <HAL_ADC_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f000 faed 	bl	8001498 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <MX_ADC1_Init+0x98>)
 8000ed0:	f000 fe3e 	bl	8001b50 <HAL_ADC_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eda:	f000 fadd 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000050 	.word	0x20000050
 8000eec:	40012000 	.word	0x40012000
 8000ef0:	0f000001 	.word	0x0f000001

08000ef4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000efa:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <MX_I2C1_Init+0x78>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f00:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <MX_I2C1_Init+0x7c>)
 8000f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f2e:	480e      	ldr	r0, [pc, #56]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f30:	f001 fb72 	bl	8002618 <HAL_I2C_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f3a:	f000 faad 	bl	8001498 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f42:	f001 fbf9 	bl	8002738 <HAL_I2CEx_ConfigAnalogFilter>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f4c:	f000 faa4 	bl	8001498 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f50:	2100      	movs	r1, #0
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_I2C1_Init+0x74>)
 8000f54:	f001 fc3b 	bl	80027ce <HAL_I2CEx_ConfigDigitalFilter>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f5e:	f000 fa9b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000098 	.word	0x20000098
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	00301739 	.word	0x00301739

08000f74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <MX_SPI1_Init+0x78>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000f80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000f8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000faa:	2218      	movs	r2, #24
 8000fac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000fce:	2208      	movs	r2, #8
 8000fd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_SPI1_Init+0x74>)
 8000fd4:	f002 fe8c 	bl	8003cf0 <HAL_SPI_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fde:	f000 fa5b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000ec 	.word	0x200000ec
 8000fec:	40013000 	.word	0x40013000

08000ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001010:	4a20      	ldr	r2, [pc, #128]	; (8001094 <MX_TIM1_Init+0xa4>)
 8001012:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001016:	2247      	movs	r2, #71	; 0x47
 8001018:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM1_Init+0xa0>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001026:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_TIM1_Init+0xa0>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800103a:	4815      	ldr	r0, [pc, #84]	; (8001090 <MX_TIM1_Init+0xa0>)
 800103c:	f003 f9fa 	bl	8004434 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001046:	f000 fa27 	bl	8001498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001058:	f003 fab4 	bl	80045c4 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001062:	f000 fa19 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_TIM1_Init+0xa0>)
 8001078:	f003 fca8 	bl	80049cc <HAL_TIMEx_MasterConfigSynchronization>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001082:	f000 fa09 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000150 	.word	0x20000150
 8001094:	40010000 	.word	0x40010000

08001098 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <MX_USART3_UART_Init+0x5c>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_USART3_UART_Init+0x58>)
 80010dc:	f003 fd04 	bl	8004ae8 <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010e6:	f000 f9d7 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000019c 	.word	0x2000019c
 80010f4:	40004800 	.word	0x40004800

080010f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001102:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001106:	2206      	movs	r2, #6
 8001108:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110c:	2202      	movs	r2, #2
 800110e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001118:	2202      	movs	r2, #2
 800111a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111e:	2201      	movs	r2, #1
 8001120:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001130:	2201      	movs	r2, #1
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113c:	f001 fb93 	bl	8002866 <HAL_PCD_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001146:	f000 f9a7 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000224 	.word	0x20000224

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	; 0x38
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800116a:	4bb5      	ldr	r3, [pc, #724]	; (8001440 <MX_GPIO_Init+0x2ec>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4ab4      	ldr	r2, [pc, #720]	; (8001440 <MX_GPIO_Init+0x2ec>)
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4bb2      	ldr	r3, [pc, #712]	; (8001440 <MX_GPIO_Init+0x2ec>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	623b      	str	r3, [r7, #32]
 8001180:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4baf      	ldr	r3, [pc, #700]	; (8001440 <MX_GPIO_Init+0x2ec>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4aae      	ldr	r2, [pc, #696]	; (8001440 <MX_GPIO_Init+0x2ec>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4bac      	ldr	r3, [pc, #688]	; (8001440 <MX_GPIO_Init+0x2ec>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119a:	4ba9      	ldr	r3, [pc, #676]	; (8001440 <MX_GPIO_Init+0x2ec>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4aa8      	ldr	r2, [pc, #672]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011a0:	f043 0320 	orr.w	r3, r3, #32
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4ba6      	ldr	r3, [pc, #664]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0320 	and.w	r3, r3, #32
 80011ae:	61bb      	str	r3, [r7, #24]
 80011b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4ba3      	ldr	r3, [pc, #652]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4aa2      	ldr	r2, [pc, #648]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4ba0      	ldr	r3, [pc, #640]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b9d      	ldr	r3, [pc, #628]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a9c      	ldr	r2, [pc, #624]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b9a      	ldr	r3, [pc, #616]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b97      	ldr	r3, [pc, #604]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a96      	ldr	r2, [pc, #600]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b94      	ldr	r3, [pc, #592]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b91      	ldr	r3, [pc, #580]	; (8001440 <MX_GPIO_Init+0x2ec>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a90      	ldr	r2, [pc, #576]	; (8001440 <MX_GPIO_Init+0x2ec>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b8e      	ldr	r3, [pc, #568]	; (8001440 <MX_GPIO_Init+0x2ec>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001212:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <MX_GPIO_Init+0x2ec>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a8a      	ldr	r2, [pc, #552]	; (8001440 <MX_GPIO_Init+0x2ec>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b88      	ldr	r3, [pc, #544]	; (8001440 <MX_GPIO_Init+0x2ec>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, C1_Pin|C2_Pin|C3_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f245 0108 	movw	r1, #20488	; 0x5008
 8001230:	4884      	ldr	r0, [pc, #528]	; (8001444 <MX_GPIO_Init+0x2f0>)
 8001232:	f001 f9b3 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	4883      	ldr	r0, [pc, #524]	; (8001448 <MX_GPIO_Init+0x2f4>)
 800123c:	f001 f9ae 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_EN_Pin|RCLK_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	21c0      	movs	r1, #192	; 0xc0
 8001244:	4881      	ldr	r0, [pc, #516]	; (800144c <MX_GPIO_Init+0x2f8>)
 8001246:	f001 f9a9 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_2|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f244 0185 	movw	r1, #16517	; 0x4085
 8001250:	487f      	ldr	r0, [pc, #508]	; (8001450 <MX_GPIO_Init+0x2fc>)
 8001252:	f001 f9a3 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D2_Pin|D3_Pin|D1_Pin|D4_Pin, GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800125c:	487a      	ldr	r0, [pc, #488]	; (8001448 <MX_GPIO_Init+0x2f4>)
 800125e:	f001 f99d 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|C4_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001268:	4876      	ldr	r0, [pc, #472]	; (8001444 <MX_GPIO_Init+0x2f0>)
 800126a:	f001 f997 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SRCLR_GPIO_Port, SRCLR_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001274:	4877      	ldr	r0, [pc, #476]	; (8001454 <MX_GPIO_Init+0x300>)
 8001276:	f001 f991 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f244 2140 	movw	r1, #16960	; 0x4240
 8001280:	4875      	ldr	r0, [pc, #468]	; (8001458 <MX_GPIO_Init+0x304>)
 8001282:	f001 f98b 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8001286:	2374      	movs	r3, #116	; 0x74
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800128e:	2302      	movs	r3, #2
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	486a      	ldr	r0, [pc, #424]	; (8001444 <MX_GPIO_Init+0x2f0>)
 800129a:	f000 ffbb 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin PE8 C2_Pin C3_Pin
                           C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|GPIO_PIN_8|C2_Pin|C3_Pin
 800129e:	f24d 1308 	movw	r3, #53512	; 0xd108
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |C4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4863      	ldr	r0, [pc, #396]	; (8001444 <MX_GPIO_Init+0x2f0>)
 80012b8:	f000 ffac 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4862      	ldr	r0, [pc, #392]	; (800145c <MX_GPIO_Init+0x308>)
 80012d4:	f000 ff9e 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	4856      	ldr	r0, [pc, #344]	; (8001448 <MX_GPIO_Init+0x2f4>)
 80012f0:	f000 ff90 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80012f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	484f      	ldr	r0, [pc, #316]	; (8001448 <MX_GPIO_Init+0x2f4>)
 800130a:	f000 ff83 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin;
 800130e:	2322      	movs	r3, #34	; 0x22
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800131e:	230b      	movs	r3, #11
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	484c      	ldr	r0, [pc, #304]	; (800145c <MX_GPIO_Init+0x308>)
 800132a:	f000 ff73 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800132e:	2306      	movs	r3, #6
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800133e:	230b      	movs	r3, #11
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4840      	ldr	r0, [pc, #256]	; (800144c <MX_GPIO_Init+0x2f8>)
 800134a:	f000 ff63 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_EN_Pin RCLK_Pin */
  GPIO_InitStruct.Pin = OUT_EN_Pin|RCLK_Pin;
 800134e:	23c0      	movs	r3, #192	; 0xc0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	4839      	ldr	r0, [pc, #228]	; (800144c <MX_GPIO_Init+0x2f8>)
 8001366:	f000 ff55 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB2 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_2|LD3_Pin|LD2_Pin;
 800136a:	f244 0385 	movw	r3, #16517	; 0x4085
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	4833      	ldr	r0, [pc, #204]	; (8001450 <MX_GPIO_Init+0x2fc>)
 8001384:	f000 ff46 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D1_Pin D4_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D4_Pin;
 8001388:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800138e:	2311      	movs	r3, #17
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	4829      	ldr	r0, [pc, #164]	; (8001448 <MX_GPIO_Init+0x2f4>)
 80013a2:	f000 ff37 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	4824      	ldr	r0, [pc, #144]	; (8001450 <MX_GPIO_Init+0x2fc>)
 80013be:	f000 ff29 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d4:	230b      	movs	r3, #11
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	481c      	ldr	r0, [pc, #112]	; (8001450 <MX_GPIO_Init+0x2fc>)
 80013e0:	f000 ff18 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : SRCLR_Pin */
  GPIO_InitStruct.Pin = SRCLR_Pin;
 80013e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SRCLR_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4815      	ldr	r0, [pc, #84]	; (8001454 <MX_GPIO_Init+0x300>)
 80013fe:	f000 ff09 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin PG9 PG14 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_9|GPIO_PIN_14;
 8001402:	f244 2340 	movw	r3, #16960	; 0x4240
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	480f      	ldr	r0, [pc, #60]	; (8001458 <MX_GPIO_Init+0x304>)
 800141c:	f000 fefa 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <MX_GPIO_Init+0x304>)
 8001434:	f000 feee 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001438:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
 800143e:	e00f      	b.n	8001460 <MX_GPIO_Init+0x30c>
 8001440:	40023800 	.word	0x40023800
 8001444:	40021000 	.word	0x40021000
 8001448:	40021400 	.word	0x40021400
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40021800 	.word	0x40021800
 800145c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800146c:	230b      	movs	r3, #11
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <MX_GPIO_Init+0x340>)
 8001478:	f000 fecc 	bl	8002214 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	2028      	movs	r0, #40	; 0x28
 8001482:	f000 fe90 	bl	80021a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001486:	2028      	movs	r0, #40	; 0x28
 8001488:	f000 fea9 	bl	80021de <HAL_NVIC_EnableIRQ>

}
 800148c:	bf00      	nop
 800148e:	3738      	adds	r7, #56	; 0x38
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021800 	.word	0x40021800

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>
	...

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_MspInit+0x44>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_MspInit+0x44>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_MspInit+0x44>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_MspInit+0x44>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_MspInit+0x44>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_MspInit+0x44>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a15      	ldr	r2, [pc, #84]	; (8001560 <HAL_ADC_MspInit+0x74>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d123      	bne.n	8001556 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_ADC_MspInit+0x78>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <HAL_ADC_MspInit+0x78>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_ADC_MspInit+0x78>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_ADC_MspInit+0x78>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_ADC_MspInit+0x78>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_ADC_MspInit+0x78>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800153e:	2308      	movs	r3, #8
 8001540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001542:	2303      	movs	r3, #3
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_ADC_MspInit+0x7c>)
 8001552:	f000 fe5f 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40012000 	.word	0x40012000
 8001564:	40023800 	.word	0x40023800
 8001568:	40020000 	.word	0x40020000

0800156c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ae      	sub	sp, #184	; 0xb8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2290      	movs	r2, #144	; 0x90
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f004 fa2b 	bl	80059e8 <memset>
  if(hi2c->Instance==I2C1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a22      	ldr	r2, [pc, #136]	; (8001620 <HAL_I2C_MspInit+0xb4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d13c      	bne.n	8001616 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800159c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 ff78 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015b6:	f7ff ff6f 	bl	8001498 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_I2C_MspInit+0xb8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_I2C_MspInit+0xb8>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_I2C_MspInit+0xb8>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80015d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015da:	2312      	movs	r3, #18
 80015dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ec:	2304      	movs	r3, #4
 80015ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015f6:	4619      	mov	r1, r3
 80015f8:	480b      	ldr	r0, [pc, #44]	; (8001628 <HAL_I2C_MspInit+0xbc>)
 80015fa:	f000 fe0b 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_I2C_MspInit+0xb8>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_I2C_MspInit+0xb8>)
 8001604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_I2C_MspInit+0xb8>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	37b8      	adds	r7, #184	; 0xb8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40005400 	.word	0x40005400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020400 	.word	0x40020400

0800162c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <HAL_SPI_MspInit+0xb4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d143      	bne.n	80016d6 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001696:	2320      	movs	r3, #32
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016a6:	2305      	movs	r3, #5
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <HAL_SPI_MspInit+0xbc>)
 80016b2:	f000 fdaf 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016c6:	2305      	movs	r3, #5
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4806      	ldr	r0, [pc, #24]	; (80016ec <HAL_SPI_MspInit+0xc0>)
 80016d2:	f000 fd9f 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40013000 	.word	0x40013000
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020c00 	.word	0x40020c00

080016f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_TIM_Base_MspInit+0x38>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10b      	bne.n	800171a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_TIM_Base_MspInit+0x3c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_TIM_Base_MspInit+0x3c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_TIM_Base_MspInit+0x3c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40010000 	.word	0x40010000
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0ae      	sub	sp, #184	; 0xb8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2290      	movs	r2, #144	; 0x90
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f004 f949 	bl	80059e8 <memset>
  if(huart->Instance==USART3)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_UART_MspInit+0xb4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d13c      	bne.n	80017da <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001764:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001766:	2300      	movs	r3, #0
 8001768:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fe96 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800177a:	f7ff fe8d 	bl	8001498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c8:	2307      	movs	r3, #7
 80017ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_UART_MspInit+0xbc>)
 80017d6:	f000 fd1d 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	37b8      	adds	r7, #184	; 0xb8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40004800 	.word	0x40004800
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020c00 	.word	0x40020c00

080017f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0ae      	sub	sp, #184	; 0xb8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2290      	movs	r2, #144	; 0x90
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f004 f8e9 	bl	80059e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	d159      	bne.n	80018d4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001820:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001824:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4618      	mov	r0, r3
 8001832:	f001 fe35 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800183c:	f7ff fe2c 	bl	8001498 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_PCD_MspInit+0xec>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	4a25      	ldr	r2, [pc, #148]	; (80018dc <HAL_PCD_MspInit+0xec>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6313      	str	r3, [r2, #48]	; 0x30
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_PCD_MspInit+0xec>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001858:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800185c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001872:	230a      	movs	r3, #10
 8001874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800187c:	4619      	mov	r1, r3
 800187e:	4818      	ldr	r0, [pc, #96]	; (80018e0 <HAL_PCD_MspInit+0xf0>)
 8001880:	f000 fcc8 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001888:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800189c:	4619      	mov	r1, r3
 800189e:	4810      	ldr	r0, [pc, #64]	; (80018e0 <HAL_PCD_MspInit+0xf0>)
 80018a0:	f000 fcb8 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_PCD_MspInit+0xec>)
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_PCD_MspInit+0xec>)
 80018aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ae:	6353      	str	r3, [r2, #52]	; 0x34
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_PCD_MspInit+0xec>)
 80018b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_PCD_MspInit+0xec>)
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_PCD_MspInit+0xec>)
 80018c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c6:	6453      	str	r3, [r2, #68]	; 0x44
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_PCD_MspInit+0xec>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	37b8      	adds	r7, #184	; 0xb8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <BusFault_Handler+0x4>

080018fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler+0x4>

08001902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001930:	f000 f886 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800193c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001940:	f000 fe46 	bl	80025d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001944:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001948:	f000 fe42 	bl	80025d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <SystemInit+0x20>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <SystemInit+0x20>)
 800195c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800197a:	490e      	ldr	r1, [pc, #56]	; (80019b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001990:	4c0b      	ldr	r4, [pc, #44]	; (80019c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800199e:	f7ff ffd7 	bl	8001950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a2:	f003 fffd 	bl	80059a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a6:	f7ff f991 	bl	8000ccc <main>
  bx  lr    
 80019aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80019b8:	08005a80 	.word	0x08005a80
  ldr r2, =_sbss
 80019bc:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80019c0:	2000074c 	.word	0x2000074c

080019c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC_IRQHandler>

080019c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ca:	2003      	movs	r0, #3
 80019cc:	f000 fbe0 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f000 f805 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d6:	f7ff fd65 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fbfb 	bl	80021fa <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f000 fbc3 	bl	80021a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000028 	.word	0x20000028
 8001a38:	20000030 	.word	0x20000030
 8001a3c:	2000002c 	.word	0x2000002c

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000030 	.word	0x20000030
 8001a64:	20000748 	.word	0x20000748

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000748 	.word	0x20000748

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffde 	bl	8001a68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000030 	.word	0x20000030

08001ac8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e031      	b.n	8001b42 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fd00 	bl	80014ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d116      	bne.n	8001b34 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_ADC_Init+0x84>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	f043 0202 	orr.w	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f970 	bl	8001dfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
 8001b32:	e001      	b.n	8001b38 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	ffffeefd 	.word	0xffffeefd

08001b50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1c>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e136      	b.n	8001dda <HAL_ADC_ConfigChannel+0x28a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d93a      	bls.n	8001bf2 <HAL_ADC_ConfigChannel+0xa2>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b84:	d035      	beq.n	8001bf2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68d9      	ldr	r1, [r3, #12]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b1e      	subs	r3, #30
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	400a      	ands	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a8d      	ldr	r2, [pc, #564]	; (8001de8 <HAL_ADC_ConfigChannel+0x298>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10a      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	061a      	lsls	r2, r3, #24
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bca:	e035      	b.n	8001c38 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68d9      	ldr	r1, [r3, #12]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4403      	add	r3, r0
 8001be4:	3b1e      	subs	r3, #30
 8001be6:	409a      	lsls	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bf0:	e022      	b.n	8001c38 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6919      	ldr	r1, [r3, #16]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	2207      	movs	r2, #7
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	400a      	ands	r2, r1
 8001c14:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6919      	ldr	r1, [r3, #16]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	4603      	mov	r3, r0
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4403      	add	r3, r0
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b06      	cmp	r3, #6
 8001c3e:	d824      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b05      	subs	r3, #5
 8001c52:	221f      	movs	r2, #31
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	400a      	ands	r2, r1
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b05      	subs	r3, #5
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34
 8001c88:	e04c      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d824      	bhi.n	8001cdc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b23      	subs	r3, #35	; 0x23
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b23      	subs	r3, #35	; 0x23
 8001cce:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cda:	e023      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	3b41      	subs	r3, #65	; 0x41
 8001cee:	221f      	movs	r2, #31
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	3b41      	subs	r3, #65	; 0x41
 8001d18:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a30      	ldr	r2, [pc, #192]	; (8001dec <HAL_ADC_ConfigChannel+0x29c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d10a      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1f4>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d36:	d105      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a2c      	ldr	r2, [pc, #176]	; (8001df0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d3e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d42:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a28      	ldr	r2, [pc, #160]	; (8001dec <HAL_ADC_ConfigChannel+0x29c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10f      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x21e>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d10b      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001d56:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d60:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1e      	ldr	r2, [pc, #120]	; (8001dec <HAL_ADC_ConfigChannel+0x29c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d12b      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x280>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_ADC_ConfigChannel+0x298>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d003      	beq.n	8001d8a <HAL_ADC_ConfigChannel+0x23a>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b11      	cmp	r3, #17
 8001d88:	d122      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d90:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d94:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001da0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_ADC_ConfigChannel+0x298>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d111      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_ADC_ConfigChannel+0x2a4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0c9a      	lsrs	r2, r3, #18
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dc2:	e002      	b.n	8001dca <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f9      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	10000012 	.word	0x10000012
 8001dec:	40012000 	.word	0x40012000
 8001df0:	40012300 	.word	0x40012300
 8001df4:	20000028 	.word	0x20000028
 8001df8:	431bde83 	.word	0x431bde83

08001dfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e04:	4b78      	ldr	r3, [pc, #480]	; (8001fe8 <ADC_Init+0x1ec>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a77      	ldr	r2, [pc, #476]	; (8001fe8 <ADC_Init+0x1ec>)
 8001e0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e0e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e10:	4b75      	ldr	r3, [pc, #468]	; (8001fe8 <ADC_Init+0x1ec>)
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4973      	ldr	r1, [pc, #460]	; (8001fe8 <ADC_Init+0x1ec>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	021a      	lsls	r2, r3, #8
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	4a58      	ldr	r2, [pc, #352]	; (8001fec <ADC_Init+0x1f0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	e00f      	b.n	8001ef6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ef4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0202 	bic.w	r2, r2, #2
 8001f04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6899      	ldr	r1, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	005a      	lsls	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	035a      	lsls	r2, r3, #13
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	e007      	b.n	8001f6c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	051a      	lsls	r2, r3, #20
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6899      	ldr	r1, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fae:	025a      	lsls	r2, r3, #9
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	029a      	lsls	r2, r3, #10
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40012300 	.word	0x40012300
 8001fec:	0f000001 	.word	0x0f000001

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <__NVIC_SetPriorityGrouping+0x40>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	4313      	orrs	r3, r2
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	; (8002030 <__NVIC_SetPriorityGrouping+0x40>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00
 8002034:	05fa0000 	.word	0x05fa0000

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f7ff ff8e 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff29 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff3e 	bl	8002038 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff8e 	bl	80020e4 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5d 	bl	8002090 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff31 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffa2 	bl	800214c <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e175      	b.n	8002520 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	429a      	cmp	r2, r3
 800224e:	f040 8164 	bne.w	800251a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d005      	beq.n	800226a <HAL_GPIO_Init+0x56>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d130      	bne.n	80022cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 0201 	and.w	r2, r3, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d017      	beq.n	8002308 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d123      	bne.n	800235c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	08da      	lsrs	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3208      	adds	r2, #8
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0203 	and.w	r2, r3, #3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80be 	beq.w	800251a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_GPIO_Init+0x324>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a65      	ldr	r2, [pc, #404]	; (8002538 <HAL_GPIO_Init+0x324>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b63      	ldr	r3, [pc, #396]	; (8002538 <HAL_GPIO_Init+0x324>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023b6:	4a61      	ldr	r2, [pc, #388]	; (800253c <HAL_GPIO_Init+0x328>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_GPIO_Init+0x32c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d037      	beq.n	8002452 <HAL_GPIO_Init+0x23e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a57      	ldr	r2, [pc, #348]	; (8002544 <HAL_GPIO_Init+0x330>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d031      	beq.n	800244e <HAL_GPIO_Init+0x23a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a56      	ldr	r2, [pc, #344]	; (8002548 <HAL_GPIO_Init+0x334>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d02b      	beq.n	800244a <HAL_GPIO_Init+0x236>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a55      	ldr	r2, [pc, #340]	; (800254c <HAL_GPIO_Init+0x338>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d025      	beq.n	8002446 <HAL_GPIO_Init+0x232>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_GPIO_Init+0x33c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01f      	beq.n	8002442 <HAL_GPIO_Init+0x22e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a53      	ldr	r2, [pc, #332]	; (8002554 <HAL_GPIO_Init+0x340>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d019      	beq.n	800243e <HAL_GPIO_Init+0x22a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_GPIO_Init+0x344>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0x226>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a51      	ldr	r2, [pc, #324]	; (800255c <HAL_GPIO_Init+0x348>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00d      	beq.n	8002436 <HAL_GPIO_Init+0x222>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a50      	ldr	r2, [pc, #320]	; (8002560 <HAL_GPIO_Init+0x34c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x21e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4f      	ldr	r2, [pc, #316]	; (8002564 <HAL_GPIO_Init+0x350>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_GPIO_Init+0x21a>
 800242a:	2309      	movs	r3, #9
 800242c:	e012      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800242e:	230a      	movs	r3, #10
 8002430:	e010      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002432:	2308      	movs	r3, #8
 8002434:	e00e      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002436:	2307      	movs	r3, #7
 8002438:	e00c      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800243a:	2306      	movs	r3, #6
 800243c:	e00a      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800243e:	2305      	movs	r3, #5
 8002440:	e008      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002442:	2304      	movs	r3, #4
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002446:	2303      	movs	r3, #3
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002452:	2300      	movs	r3, #0
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f002 0203 	and.w	r2, r2, #3
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	4093      	lsls	r3, r2
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002464:	4935      	ldr	r1, [pc, #212]	; (800253c <HAL_GPIO_Init+0x328>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_GPIO_Init+0x354>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002496:	4a34      	ldr	r2, [pc, #208]	; (8002568 <HAL_GPIO_Init+0x354>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800249c:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_GPIO_Init+0x354>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c0:	4a29      	ldr	r2, [pc, #164]	; (8002568 <HAL_GPIO_Init+0x354>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <HAL_GPIO_Init+0x354>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_GPIO_Init+0x354>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_GPIO_Init+0x354>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <HAL_GPIO_Init+0x354>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	f67f ae86 	bls.w	8002234 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40013800 	.word	0x40013800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020c00 	.word	0x40020c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40021400 	.word	0x40021400
 8002558:	40021800 	.word	0x40021800
 800255c:	40021c00 	.word	0x40021c00
 8002560:	40022000 	.word	0x40022000
 8002564:	40022400 	.word	0x40022400
 8002568:	40013c00 	.word	0x40013c00

0800256c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e001      	b.n	800258e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	807b      	strh	r3, [r7, #2]
 80025a8:	4613      	mov	r3, r2
 80025aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ac:	787b      	ldrb	r3, [r7, #1]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025b8:	e003      	b.n	80025c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025ba:	887b      	ldrh	r3, [r7, #2]
 80025bc:	041a      	lsls	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	619a      	str	r2, [r3, #24]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f806 	bl	8002600 <HAL_GPIO_EXTI_Callback>
  }
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40013c00 	.word	0x40013c00

08002600 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe ff94 	bl	800156c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	; 0x24
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002668:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002678:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d107      	bne.n	8002692 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	e006      	b.n	80026a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800269e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d104      	bne.n	80026b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_I2C_Init+0x11c>)
 80026be:	430b      	orrs	r3, r1
 80026c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69d9      	ldr	r1, [r3, #28]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	02008000 	.word	0x02008000

08002738 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b20      	cmp	r3, #32
 800274c:	d138      	bne.n	80027c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002758:	2302      	movs	r3, #2
 800275a:	e032      	b.n	80027c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	; 0x24
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800278a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6819      	ldr	r1, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d139      	bne.n	8002858 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e033      	b.n	800285a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2224      	movs	r2, #36	; 0x24
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002820:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e000      	b.n	800285a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002868:	b08f      	sub	sp, #60	; 0x3c
 800286a:	af0a      	add	r7, sp, #40	; 0x28
 800286c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e116      	b.n	8002aa6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe ffac 	bl	80017f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2203      	movs	r2, #3
 800289c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 fdd6 	bl	8005468 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	687e      	ldr	r6, [r7, #4]
 80028c4:	466d      	mov	r5, sp
 80028c6:	f106 0410 	add.w	r4, r6, #16
 80028ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028da:	1d33      	adds	r3, r6, #4
 80028dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028de:	6838      	ldr	r0, [r7, #0]
 80028e0:	f002 fd6a 	bl	80053b8 <USB_CoreInit>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0d7      	b.n	8002aa6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 fdc4 	bl	800548a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002902:	2300      	movs	r3, #0
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	e04a      	b.n	800299e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	333d      	adds	r3, #61	; 0x3d
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	333c      	adds	r3, #60	; 0x3c
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	b298      	uxth	r0, r3
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	3344      	adds	r3, #68	; 0x44
 8002944:	4602      	mov	r2, r0
 8002946:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3340      	adds	r3, #64	; 0x40
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	3348      	adds	r3, #72	; 0x48
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	334c      	adds	r3, #76	; 0x4c
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3354      	adds	r3, #84	; 0x54
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	3301      	adds	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d3af      	bcc.n	8002908 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e044      	b.n	8002a38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	3301      	adds	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d3b5      	bcc.n	80029ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	687e      	ldr	r6, [r7, #4]
 8002a4a:	466d      	mov	r5, sp
 8002a4c:	f106 0410 	add.w	r4, r6, #16
 8002a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a60:	1d33      	adds	r3, r6, #4
 8002a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a64:	6838      	ldr	r0, [r7, #0]
 8002a66:	f002 fd5d 	bl	8005524 <USB_DevInit>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e014      	b.n	8002aa6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d102      	bne.n	8002a9a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f80b 	bl	8002ab0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 ff1b 	bl	80058da <USB_DevDisconnect>

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ab0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	10000003 	.word	0x10000003

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e29b      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8087 	beq.w	8002c2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b1c:	4b96      	ldr	r3, [pc, #600]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d00c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b28:	4b93      	ldr	r3, [pc, #588]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d112      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62>
 8002b34:	4b90      	ldr	r3, [pc, #576]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b40:	d10b      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b42:	4b8d      	ldr	r3, [pc, #564]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d06c      	beq.n	8002c28 <HAL_RCC_OscConfig+0x130>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d168      	bne.n	8002c28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e275      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x7a>
 8002b64:	4b84      	ldr	r3, [pc, #528]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a83      	ldr	r2, [pc, #524]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	e02e      	b.n	8002bd0 <HAL_RCC_OscConfig+0xd8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x9c>
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7e      	ldr	r2, [pc, #504]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b7c      	ldr	r3, [pc, #496]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a7b      	ldr	r2, [pc, #492]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e01d      	b.n	8002bd0 <HAL_RCC_OscConfig+0xd8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002b9e:	4b76      	ldr	r3, [pc, #472]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a75      	ldr	r2, [pc, #468]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a72      	ldr	r2, [pc, #456]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0xd8>
 8002bb8:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a6e      	ldr	r2, [pc, #440]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6b      	ldr	r2, [pc, #428]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe ff46 	bl	8001a68 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe ff42 	bl	8001a68 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e229      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0xe8>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe ff32 	bl	8001a68 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fe ff2e 	bl	8001a68 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e215      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x110>
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d069      	beq.n	8002d0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c36:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c42:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d11c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x190>
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d116      	bne.n	8002c88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_RCC_OscConfig+0x17a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e1e9      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c72:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	493d      	ldr	r1, [pc, #244]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c86:	e040      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d023      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fee4 	bl	8001a68 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7fe fee0 	bl	8001a68 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1c7      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4929      	ldr	r1, [pc, #164]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
 8002cd6:	e018      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fec0 	bl	8001a68 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe febc 	bl	8001a68 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e1a3      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d038      	beq.n	8002d88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d019      	beq.n	8002d52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d22:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fe9d 	bl	8001a68 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d32:	f7fe fe99 	bl	8001a68 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e180      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x23a>
 8002d50:	e01a      	b.n	8002d88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_RCC_OscConfig+0x280>)
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fe83 	bl	8001a68 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe fe7f 	bl	8001a68 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d903      	bls.n	8002d7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e166      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
 8002d78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b92      	ldr	r3, [pc, #584]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ee      	bne.n	8002d66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a4 	beq.w	8002ede <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d96:	4b8c      	ldr	r3, [pc, #560]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	4b89      	ldr	r3, [pc, #548]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a88      	ldr	r2, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b86      	ldr	r3, [pc, #536]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dbe:	4b83      	ldr	r3, [pc, #524]	; (8002fcc <HAL_RCC_OscConfig+0x4d4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d118      	bne.n	8002dfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dca:	4b80      	ldr	r3, [pc, #512]	; (8002fcc <HAL_RCC_OscConfig+0x4d4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7f      	ldr	r2, [pc, #508]	; (8002fcc <HAL_RCC_OscConfig+0x4d4>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fe47 	bl	8001a68 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dde:	f7fe fe43 	bl	8001a68 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e12a      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df0:	4b76      	ldr	r3, [pc, #472]	; (8002fcc <HAL_RCC_OscConfig+0x4d4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x31a>
 8002e04:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a6f      	ldr	r2, [pc, #444]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	e02d      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x33c>
 8002e1a:	4b6b      	ldr	r3, [pc, #428]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a6a      	ldr	r2, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
 8002e26:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a67      	ldr	r2, [pc, #412]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	e01c      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x35e>
 8002e3c:	4b62      	ldr	r3, [pc, #392]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a61      	ldr	r2, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a5e      	ldr	r2, [pc, #376]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	e00b      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
 8002e56:	4b5c      	ldr	r3, [pc, #368]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a5b      	ldr	r2, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	4b59      	ldr	r3, [pc, #356]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a58      	ldr	r2, [pc, #352]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d015      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe fdf7 	bl	8001a68 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe fdf3 	bl	8001a68 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0d8      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ee      	beq.n	8002e7e <HAL_RCC_OscConfig+0x386>
 8002ea0:	e014      	b.n	8002ecc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea2:	f7fe fde1 	bl	8001a68 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fe fddd 	bl	8001a68 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0c2      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ee      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a3c      	ldr	r2, [pc, #240]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80ae 	beq.w	8003044 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee8:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d06d      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d14b      	bne.n	8002f94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efc:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a31      	ldr	r2, [pc, #196]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe fdae 	bl	8001a68 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe fdaa 	bl	8001a68 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e091      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	3b01      	subs	r3, #1
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	071b      	lsls	r3, r3, #28
 8002f5a:	491b      	ldr	r1, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fd7c 	bl	8001a68 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe fd78 	bl	8001a68 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e05f      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x47c>
 8002f92:	e057      	b.n	8003044 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fd62 	bl	8001a68 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe fd5e 	bl	8001a68 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e045      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCC_OscConfig+0x4d0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x4b0>
 8002fc6:	e03d      	b.n	8003044 <HAL_RCC_OscConfig+0x54c>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <HAL_RCC_OscConfig+0x558>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d030      	beq.n	8003040 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d129      	bne.n	8003040 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d122      	bne.n	8003040 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003006:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003008:	4293      	cmp	r3, r2
 800300a:	d119      	bne.n	8003040 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	3b01      	subs	r3, #1
 800301a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d10f      	bne.n	8003040 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0d0      	b.n	800320e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800306c:	4b6a      	ldr	r3, [pc, #424]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d910      	bls.n	800309c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b67      	ldr	r3, [pc, #412]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 020f 	bic.w	r2, r3, #15
 8003082:	4965      	ldr	r1, [pc, #404]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b63      	ldr	r3, [pc, #396]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0b8      	b.n	800320e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b4:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a58      	ldr	r2, [pc, #352]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80030ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a52      	ldr	r2, [pc, #328]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d8:	4b50      	ldr	r3, [pc, #320]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	494d      	ldr	r1, [pc, #308]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d040      	beq.n	8003178 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d115      	bne.n	8003136 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e07f      	b.n	800320e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e073      	b.n	800320e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	4b3d      	ldr	r3, [pc, #244]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e06b      	b.n	800320e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003136:	4b39      	ldr	r3, [pc, #228]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4936      	ldr	r1, [pc, #216]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003148:	f7fe fc8e 	bl	8001a68 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	e00a      	b.n	8003166 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7fe fc8a 	bl	8001a68 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e053      	b.n	800320e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	4b2d      	ldr	r3, [pc, #180]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 020c 	and.w	r2, r3, #12
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	429a      	cmp	r2, r3
 8003176:	d1eb      	bne.n	8003150 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003178:	4b27      	ldr	r3, [pc, #156]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d210      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 020f 	bic.w	r2, r3, #15
 800318e:	4922      	ldr	r1, [pc, #136]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e032      	b.n	800320e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4916      	ldr	r1, [pc, #88]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	490e      	ldr	r1, [pc, #56]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031e6:	f000 f821 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80031ea:	4602      	mov	r2, r0
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	490a      	ldr	r1, [pc, #40]	; (8003220 <HAL_RCC_ClockConfig+0x1cc>)
 80031f8:	5ccb      	ldrb	r3, [r1, r3]
 80031fa:	fa22 f303 	lsr.w	r3, r2, r3
 80031fe:	4a09      	ldr	r2, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1d0>)
 8003200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x1d4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fbea 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00
 800321c:	40023800 	.word	0x40023800
 8003220:	08005a58 	.word	0x08005a58
 8003224:	20000028 	.word	0x20000028
 8003228:	2000002c 	.word	0x2000002c

0800322c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800322c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003230:	b094      	sub	sp, #80	; 0x50
 8003232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	647b      	str	r3, [r7, #68]	; 0x44
 8003238:	2300      	movs	r3, #0
 800323a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800323c:	2300      	movs	r3, #0
 800323e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003244:	4b79      	ldr	r3, [pc, #484]	; (800342c <HAL_RCC_GetSysClockFreq+0x200>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d00d      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x40>
 8003250:	2b08      	cmp	r3, #8
 8003252:	f200 80e1 	bhi.w	8003418 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x34>
 800325a:	2b04      	cmp	r3, #4
 800325c:	d003      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0x3a>
 800325e:	e0db      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003260:	4b73      	ldr	r3, [pc, #460]	; (8003430 <HAL_RCC_GetSysClockFreq+0x204>)
 8003262:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003264:	e0db      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003266:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_RCC_GetSysClockFreq+0x208>)
 8003268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800326a:	e0d8      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800326c:	4b6f      	ldr	r3, [pc, #444]	; (800342c <HAL_RCC_GetSysClockFreq+0x200>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003276:	4b6d      	ldr	r3, [pc, #436]	; (800342c <HAL_RCC_GetSysClockFreq+0x200>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d063      	beq.n	800334a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003282:	4b6a      	ldr	r3, [pc, #424]	; (800342c <HAL_RCC_GetSysClockFreq+0x200>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	2200      	movs	r2, #0
 800328a:	63bb      	str	r3, [r7, #56]	; 0x38
 800328c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003294:	633b      	str	r3, [r7, #48]	; 0x30
 8003296:	2300      	movs	r3, #0
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
 800329a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800329e:	4622      	mov	r2, r4
 80032a0:	462b      	mov	r3, r5
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f04f 0100 	mov.w	r1, #0
 80032aa:	0159      	lsls	r1, r3, #5
 80032ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b0:	0150      	lsls	r0, r2, #5
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4621      	mov	r1, r4
 80032b8:	1a51      	subs	r1, r2, r1
 80032ba:	6139      	str	r1, [r7, #16]
 80032bc:	4629      	mov	r1, r5
 80032be:	eb63 0301 	sbc.w	r3, r3, r1
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032d0:	4659      	mov	r1, fp
 80032d2:	018b      	lsls	r3, r1, #6
 80032d4:	4651      	mov	r1, sl
 80032d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032da:	4651      	mov	r1, sl
 80032dc:	018a      	lsls	r2, r1, #6
 80032de:	4651      	mov	r1, sl
 80032e0:	ebb2 0801 	subs.w	r8, r2, r1
 80032e4:	4659      	mov	r1, fp
 80032e6:	eb63 0901 	sbc.w	r9, r3, r1
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032fe:	4690      	mov	r8, r2
 8003300:	4699      	mov	r9, r3
 8003302:	4623      	mov	r3, r4
 8003304:	eb18 0303 	adds.w	r3, r8, r3
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	462b      	mov	r3, r5
 800330c:	eb49 0303 	adc.w	r3, r9, r3
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800331e:	4629      	mov	r1, r5
 8003320:	024b      	lsls	r3, r1, #9
 8003322:	4621      	mov	r1, r4
 8003324:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003328:	4621      	mov	r1, r4
 800332a:	024a      	lsls	r2, r1, #9
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003332:	2200      	movs	r2, #0
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
 8003336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800333c:	f7fc ff7c 	bl	8000238 <__aeabi_uldivmod>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4613      	mov	r3, r2
 8003346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003348:	e058      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334a:	4b38      	ldr	r3, [pc, #224]	; (800342c <HAL_RCC_GetSysClockFreq+0x200>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	099b      	lsrs	r3, r3, #6
 8003350:	2200      	movs	r2, #0
 8003352:	4618      	mov	r0, r3
 8003354:	4611      	mov	r1, r2
 8003356:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800335a:	623b      	str	r3, [r7, #32]
 800335c:	2300      	movs	r3, #0
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
 8003360:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003364:	4642      	mov	r2, r8
 8003366:	464b      	mov	r3, r9
 8003368:	f04f 0000 	mov.w	r0, #0
 800336c:	f04f 0100 	mov.w	r1, #0
 8003370:	0159      	lsls	r1, r3, #5
 8003372:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003376:	0150      	lsls	r0, r2, #5
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4641      	mov	r1, r8
 800337e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003382:	4649      	mov	r1, r9
 8003384:	eb63 0b01 	sbc.w	fp, r3, r1
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003394:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003398:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800339c:	ebb2 040a 	subs.w	r4, r2, sl
 80033a0:	eb63 050b 	sbc.w	r5, r3, fp
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	00eb      	lsls	r3, r5, #3
 80033ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b2:	00e2      	lsls	r2, r4, #3
 80033b4:	4614      	mov	r4, r2
 80033b6:	461d      	mov	r5, r3
 80033b8:	4643      	mov	r3, r8
 80033ba:	18e3      	adds	r3, r4, r3
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	464b      	mov	r3, r9
 80033c0:	eb45 0303 	adc.w	r3, r5, r3
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033d2:	4629      	mov	r1, r5
 80033d4:	028b      	lsls	r3, r1, #10
 80033d6:	4621      	mov	r1, r4
 80033d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033dc:	4621      	mov	r1, r4
 80033de:	028a      	lsls	r2, r1, #10
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e6:	2200      	movs	r2, #0
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	61fa      	str	r2, [r7, #28]
 80033ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f0:	f7fc ff22 	bl	8000238 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4613      	mov	r3, r2
 80033fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_GetSysClockFreq+0x200>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	3301      	adds	r3, #1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800340c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800340e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003416:	e002      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCC_GetSysClockFreq+0x204>)
 800341a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800341c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003420:	4618      	mov	r0, r3
 8003422:	3750      	adds	r7, #80	; 0x50
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800
 8003430:	00f42400 	.word	0x00f42400
 8003434:	007a1200 	.word	0x007a1200

08003438 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <HAL_RCC_GetHCLKFreq+0x14>)
 800343e:	681b      	ldr	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	20000028 	.word	0x20000028

08003450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003454:	f7ff fff0 	bl	8003438 <HAL_RCC_GetHCLKFreq>
 8003458:	4602      	mov	r2, r0
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	0a9b      	lsrs	r3, r3, #10
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	4903      	ldr	r1, [pc, #12]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003466:	5ccb      	ldrb	r3, [r1, r3]
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40023800 	.word	0x40023800
 8003474:	08005a68 	.word	0x08005a68

08003478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800347c:	f7ff ffdc 	bl	8003438 <HAL_RCC_GetHCLKFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	0b5b      	lsrs	r3, r3, #13
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	4903      	ldr	r1, [pc, #12]	; (800349c <HAL_RCC_GetPCLK2Freq+0x24>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40023800 	.word	0x40023800
 800349c:	08005a68 	.word	0x08005a68

080034a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d012      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034c8:	4b69      	ldr	r3, [pc, #420]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a68      	ldr	r2, [pc, #416]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034d2:	6093      	str	r3, [r2, #8]
 80034d4:	4b66      	ldr	r3, [pc, #408]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	4964      	ldr	r1, [pc, #400]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d017      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034fa:	4b5d      	ldr	r3, [pc, #372]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003500:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	4959      	ldr	r1, [pc, #356]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003518:	d101      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800351a:	2301      	movs	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003526:	2301      	movs	r3, #1
 8003528:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d017      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003536:	4b4e      	ldr	r3, [pc, #312]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800353c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	494a      	ldr	r1, [pc, #296]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003554:	d101      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003556:	2301      	movs	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003572:	2301      	movs	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 808b 	beq.w	800369a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003584:	4b3a      	ldr	r3, [pc, #232]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4a39      	ldr	r2, [pc, #228]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358e:	6413      	str	r3, [r2, #64]	; 0x40
 8003590:	4b37      	ldr	r3, [pc, #220]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a34      	ldr	r2, [pc, #208]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a8:	f7fe fa5e 	bl	8001a68 <HAL_GetTick>
 80035ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b0:	f7fe fa5a 	bl	8001a68 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e38f      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035c2:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ce:	4b28      	ldr	r3, [pc, #160]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d035      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d02e      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ec:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035f6:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800360e:	4a18      	ldr	r2, [pc, #96]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d114      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe fa22 	bl	8001a68 <HAL_GetTick>
 8003624:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	e00a      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fe fa1e 	bl	8001a68 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e351      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0ee      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003656:	d111      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003666:	400b      	ands	r3, r1
 8003668:	4901      	ldr	r1, [pc, #4]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
 800366e:	e00b      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003670:	40023800 	.word	0x40023800
 8003674:	40007000 	.word	0x40007000
 8003678:	0ffffcff 	.word	0x0ffffcff
 800367c:	4bac      	ldr	r3, [pc, #688]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4aab      	ldr	r2, [pc, #684]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003686:	6093      	str	r3, [r2, #8]
 8003688:	4ba9      	ldr	r3, [pc, #676]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003694:	49a6      	ldr	r1, [pc, #664]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003696:	4313      	orrs	r3, r2
 8003698:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d010      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036a6:	4ba2      	ldr	r3, [pc, #648]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ac:	4aa0      	ldr	r2, [pc, #640]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036b6:	4b9e      	ldr	r3, [pc, #632]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	499b      	ldr	r1, [pc, #620]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036d4:	4b96      	ldr	r3, [pc, #600]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e2:	4993      	ldr	r1, [pc, #588]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036f6:	4b8e      	ldr	r3, [pc, #568]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003704:	498a      	ldr	r1, [pc, #552]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003718:	4b85      	ldr	r3, [pc, #532]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003726:	4982      	ldr	r1, [pc, #520]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800373a:	4b7d      	ldr	r3, [pc, #500]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003740:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4979      	ldr	r1, [pc, #484]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800375c:	4b74      	ldr	r3, [pc, #464]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	4971      	ldr	r1, [pc, #452]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800377e:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	f023 020c 	bic.w	r2, r3, #12
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378c:	4968      	ldr	r1, [pc, #416]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a0:	4b63      	ldr	r3, [pc, #396]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	4960      	ldr	r1, [pc, #384]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037c2:	4b5b      	ldr	r3, [pc, #364]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	4957      	ldr	r1, [pc, #348]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037e4:	4b52      	ldr	r3, [pc, #328]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	494f      	ldr	r1, [pc, #316]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003806:	4b4a      	ldr	r3, [pc, #296]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	4946      	ldr	r1, [pc, #280]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003828:	4b41      	ldr	r3, [pc, #260]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	493e      	ldr	r1, [pc, #248]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800384a:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003858:	4935      	ldr	r1, [pc, #212]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800386c:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387a:	492d      	ldr	r1, [pc, #180]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d011      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389c:	4924      	ldr	r1, [pc, #144]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ac:	d101      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038ae:	2301      	movs	r3, #1
 80038b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ce:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038dc:	4914      	ldr	r1, [pc, #80]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00b      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003900:	490b      	ldr	r1, [pc, #44]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00f      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003924:	4902      	ldr	r1, [pc, #8]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800392c:	e002      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00b      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003940:	4b8a      	ldr	r3, [pc, #552]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003946:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	4986      	ldr	r1, [pc, #536]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003964:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003974:	497d      	ldr	r1, [pc, #500]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d006      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80d6 	beq.w	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003990:	4b76      	ldr	r3, [pc, #472]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a75      	ldr	r2, [pc, #468]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800399a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399c:	f7fe f864 	bl	8001a68 <HAL_GetTick>
 80039a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039a4:	f7fe f860 	bl	8001a68 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e195      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039b6:	4b6d      	ldr	r3, [pc, #436]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d021      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11d      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039d6:	4b65      	ldr	r3, [pc, #404]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039e4:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ea:	0e1b      	lsrs	r3, r3, #24
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	019a      	lsls	r2, r3, #6
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	431a      	orrs	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	071b      	lsls	r3, r3, #28
 8003a0a:	4958      	ldr	r1, [pc, #352]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d004      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d02e      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3c:	d129      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a3e:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a4c:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a52:	0f1b      	lsrs	r3, r3, #28
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	019a      	lsls	r2, r3, #6
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	061b      	lsls	r3, r3, #24
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	071b      	lsls	r3, r3, #28
 8003a72:	493e      	ldr	r1, [pc, #248]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a7a:	4b3c      	ldr	r3, [pc, #240]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a80:	f023 021f 	bic.w	r2, r3, #31
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	4938      	ldr	r1, [pc, #224]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01d      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a9e:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa4:	0e1b      	lsrs	r3, r3, #24
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aac:	4b2f      	ldr	r3, [pc, #188]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab2:	0f1b      	lsrs	r3, r3, #28
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	019a      	lsls	r2, r3, #6
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	071b      	lsls	r3, r3, #28
 8003ad2:	4926      	ldr	r1, [pc, #152]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d011      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	019a      	lsls	r2, r3, #6
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	061b      	lsls	r3, r3, #24
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	071b      	lsls	r3, r3, #28
 8003b02:	491a      	ldr	r1, [pc, #104]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b0a:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a17      	ldr	r2, [pc, #92]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b16:	f7fd ffa7 	bl	8001a68 <HAL_GetTick>
 8003b1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b1e:	f7fd ffa3 	bl	8001a68 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b64      	cmp	r3, #100	; 0x64
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e0d8      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b30:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	f040 80ce 	bne.w	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fd ff8a 	bl	8001a68 <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b56:	e00b      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b58:	f7fd ff86 	bl	8001a68 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d904      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e0bb      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b70:	4b5e      	ldr	r3, [pc, #376]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7c:	d0ec      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d02e      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d12a      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ba6:	4b51      	ldr	r3, [pc, #324]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bb4:	4b4d      	ldr	r3, [pc, #308]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	0f1b      	lsrs	r3, r3, #28
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	019a      	lsls	r2, r3, #6
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	061b      	lsls	r3, r3, #24
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	071b      	lsls	r3, r3, #28
 8003bda:	4944      	ldr	r1, [pc, #272]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003be2:	4b42      	ldr	r3, [pc, #264]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	493d      	ldr	r1, [pc, #244]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d022      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c10:	d11d      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c12:	4b36      	ldr	r3, [pc, #216]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	0e1b      	lsrs	r3, r3, #24
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	0f1b      	lsrs	r3, r3, #28
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	019a      	lsls	r2, r3, #6
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	061b      	lsls	r3, r3, #24
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	071b      	lsls	r3, r3, #28
 8003c46:	4929      	ldr	r1, [pc, #164]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d028      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c5a:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	0e1b      	lsrs	r3, r3, #24
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c68:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	019a      	lsls	r2, r3, #6
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	431a      	orrs	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	061b      	lsls	r3, r3, #24
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	071b      	lsls	r3, r3, #28
 8003c8e:	4917      	ldr	r1, [pc, #92]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	4911      	ldr	r1, [pc, #68]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb8:	f7fd fed6 	bl	8001a68 <HAL_GetTick>
 8003cbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cc0:	f7fd fed2 	bl	8001a68 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e007      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cde:	d1ef      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800

08003cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e09d      	b.n	8003e3e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d12:	d009      	beq.n	8003d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fc72 	bl	800162c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d68:	d902      	bls.n	8003d70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e002      	b.n	8003d76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d7e:	d007      	beq.n	8003d90 <HAL_SPI_Init+0xa0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d88:	d002      	beq.n	8003d90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	ea42 0103 	orr.w	r1, r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	0c1b      	lsrs	r3, r3, #16
 8003dec:	f003 0204 	and.w	r2, r3, #4
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e0c:	ea42 0103 	orr.w	r1, r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b088      	sub	sp, #32
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_SPI_Transmit+0x22>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e158      	b.n	800411a <HAL_SPI_Transmit+0x2d4>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e70:	f7fd fdfa 	bl	8001a68 <HAL_GetTick>
 8003e74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
 8003e88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e8a:	e13d      	b.n	8004108 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_Transmit+0x52>
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e9c:	e134      	b.n	8004108 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	88fa      	ldrh	r2, [r7, #6]
 8003eb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	88fa      	ldrh	r2, [r7, #6]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee8:	d10f      	bne.n	8003f0a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	d007      	beq.n	8003f28 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f30:	d94b      	bls.n	8003fca <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_SPI_Transmit+0xfa>
 8003f3a:	8afb      	ldrh	r3, [r7, #22]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d13e      	bne.n	8003fbe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	1c9a      	adds	r2, r3, #2
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f64:	e02b      	b.n	8003fbe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d112      	bne.n	8003f9a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	881a      	ldrh	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	1c9a      	adds	r2, r3, #2
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f98:	e011      	b.n	8003fbe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f9a:	f7fd fd65 	bl	8001a68 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d803      	bhi.n	8003fb2 <HAL_SPI_Transmit+0x16c>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d102      	bne.n	8003fb8 <HAL_SPI_Transmit+0x172>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fbc:	e0a4      	b.n	8004108 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1ce      	bne.n	8003f66 <HAL_SPI_Transmit+0x120>
 8003fc8:	e07c      	b.n	80040c4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Transmit+0x192>
 8003fd2:	8afb      	ldrh	r3, [r7, #22]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d170      	bne.n	80040ba <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d912      	bls.n	8004008 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	881a      	ldrh	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	1c9a      	adds	r2, r3, #2
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b02      	subs	r3, #2
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004006:	e058      	b.n	80040ba <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	7812      	ldrb	r2, [r2, #0]
 8004014:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800402e:	e044      	b.n	80040ba <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b02      	cmp	r3, #2
 800403c:	d12b      	bne.n	8004096 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d912      	bls.n	800406e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	1c9a      	adds	r2, r3, #2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b02      	subs	r3, #2
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800406c:	e025      	b.n	80040ba <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	330c      	adds	r3, #12
 8004078:	7812      	ldrb	r2, [r2, #0]
 800407a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004094:	e011      	b.n	80040ba <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004096:	f7fd fce7 	bl	8001a68 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d803      	bhi.n	80040ae <HAL_SPI_Transmit+0x268>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d102      	bne.n	80040b4 <HAL_SPI_Transmit+0x26e>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d102      	bne.n	80040ba <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040b8:	e026      	b.n	8004108 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1b5      	bne.n	8004030 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	6839      	ldr	r1, [r7, #0]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f949 	bl	8004360 <SPI_EndRxTxTransaction>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e000      	b.n	8004108 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004106:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004118:	7ffb      	ldrb	r3, [r7, #31]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3720      	adds	r7, #32
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004134:	f7fd fc98 	bl	8001a68 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	4413      	add	r3, r2
 8004142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004144:	f7fd fc90 	bl	8001a68 <HAL_GetTick>
 8004148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800414a:	4b39      	ldr	r3, [pc, #228]	; (8004230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	015b      	lsls	r3, r3, #5
 8004150:	0d1b      	lsrs	r3, r3, #20
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800415a:	e054      	b.n	8004206 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d050      	beq.n	8004206 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004164:	f7fd fc80 	bl	8001a68 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	429a      	cmp	r2, r3
 8004172:	d902      	bls.n	800417a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d13d      	bne.n	80041f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004192:	d111      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	d004      	beq.n	80041a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a6:	d107      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c0:	d10f      	bne.n	80041e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e017      	b.n	8004226 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3b01      	subs	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	429a      	cmp	r2, r3
 8004222:	d19b      	bne.n	800415c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000028 	.word	0x20000028

08004234 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004246:	f7fd fc0f 	bl	8001a68 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	4413      	add	r3, r2
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004256:	f7fd fc07 	bl	8001a68 <HAL_GetTick>
 800425a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004264:	4b3d      	ldr	r3, [pc, #244]	; (800435c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	00da      	lsls	r2, r3, #3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	0d1b      	lsrs	r3, r3, #20
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800427c:	e060      	b.n	8004340 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004284:	d107      	bne.n	8004296 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d104      	bne.n	8004296 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004294:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d050      	beq.n	8004340 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800429e:	f7fd fbe3 	bl	8001a68 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d902      	bls.n	80042b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d13d      	bne.n	8004330 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042cc:	d111      	bne.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d6:	d004      	beq.n	80042e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e0:	d107      	bne.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fa:	d10f      	bne.n	800431c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800431a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e010      	b.n	8004352 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	3b01      	subs	r3, #1
 800433e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d196      	bne.n	800427e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3728      	adds	r7, #40	; 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000028 	.word	0x20000028

08004360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2200      	movs	r2, #0
 8004374:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff ff5b 	bl	8004234 <SPI_WaitFifoStateUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e046      	b.n	8004422 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <SPI_EndRxTxTransaction+0xcc>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a25      	ldr	r2, [pc, #148]	; (8004430 <SPI_EndRxTxTransaction+0xd0>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	0d5b      	lsrs	r3, r3, #21
 80043a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b2:	d112      	bne.n	80043da <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2200      	movs	r2, #0
 80043bc:	2180      	movs	r1, #128	; 0x80
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f7ff feb0 	bl	8004124 <SPI_WaitFlagStateUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e023      	b.n	8004422 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d0f2      	beq.n	80043da <SPI_EndRxTxTransaction+0x7a>
 80043f4:	e000      	b.n	80043f8 <SPI_EndRxTxTransaction+0x98>
        break;
 80043f6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2200      	movs	r2, #0
 8004400:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff ff15 	bl	8004234 <SPI_WaitFifoStateUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e000      	b.n	8004422 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000028 	.word	0x20000028
 8004430:	165e9f81 	.word	0x165e9f81

08004434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e049      	b.n	80044da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd f948 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f000 f970 	bl	8004758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d001      	beq.n	80044fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e04c      	b.n	8004596 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <HAL_TIM_Base_Start+0xc0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d022      	beq.n	8004554 <HAL_TIM_Base_Start+0x70>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d01d      	beq.n	8004554 <HAL_TIM_Base_Start+0x70>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <HAL_TIM_Base_Start+0xc4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d018      	beq.n	8004554 <HAL_TIM_Base_Start+0x70>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a21      	ldr	r2, [pc, #132]	; (80045ac <HAL_TIM_Base_Start+0xc8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <HAL_TIM_Base_Start+0x70>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1f      	ldr	r2, [pc, #124]	; (80045b0 <HAL_TIM_Base_Start+0xcc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00e      	beq.n	8004554 <HAL_TIM_Base_Start+0x70>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1e      	ldr	r2, [pc, #120]	; (80045b4 <HAL_TIM_Base_Start+0xd0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d009      	beq.n	8004554 <HAL_TIM_Base_Start+0x70>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <HAL_TIM_Base_Start+0xd4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <HAL_TIM_Base_Start+0x70>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <HAL_TIM_Base_Start+0xd8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d115      	bne.n	8004580 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <HAL_TIM_Base_Start+0xdc>)
 800455c:	4013      	ands	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b06      	cmp	r3, #6
 8004564:	d015      	beq.n	8004592 <HAL_TIM_Base_Start+0xae>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456c:	d011      	beq.n	8004592 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457e:	e008      	b.n	8004592 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e000      	b.n	8004594 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004592:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40000c00 	.word	0x40000c00
 80045b4:	40010400 	.word	0x40010400
 80045b8:	40014000 	.word	0x40014000
 80045bc:	40001800 	.word	0x40001800
 80045c0:	00010007 	.word	0x00010007

080045c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_TIM_ConfigClockSource+0x1c>
 80045dc:	2302      	movs	r3, #2
 80045de:	e0b4      	b.n	800474a <HAL_TIM_ConfigClockSource+0x186>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	4b56      	ldr	r3, [pc, #344]	; (8004754 <HAL_TIM_ConfigClockSource+0x190>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004618:	d03e      	beq.n	8004698 <HAL_TIM_ConfigClockSource+0xd4>
 800461a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461e:	f200 8087 	bhi.w	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004626:	f000 8086 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x172>
 800462a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462e:	d87f      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004630:	2b70      	cmp	r3, #112	; 0x70
 8004632:	d01a      	beq.n	800466a <HAL_TIM_ConfigClockSource+0xa6>
 8004634:	2b70      	cmp	r3, #112	; 0x70
 8004636:	d87b      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004638:	2b60      	cmp	r3, #96	; 0x60
 800463a:	d050      	beq.n	80046de <HAL_TIM_ConfigClockSource+0x11a>
 800463c:	2b60      	cmp	r3, #96	; 0x60
 800463e:	d877      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004640:	2b50      	cmp	r3, #80	; 0x50
 8004642:	d03c      	beq.n	80046be <HAL_TIM_ConfigClockSource+0xfa>
 8004644:	2b50      	cmp	r3, #80	; 0x50
 8004646:	d873      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d058      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x13a>
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d86f      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b30      	cmp	r3, #48	; 0x30
 8004652:	d064      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x15a>
 8004654:	2b30      	cmp	r3, #48	; 0x30
 8004656:	d86b      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b20      	cmp	r3, #32
 800465a:	d060      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x15a>
 800465c:	2b20      	cmp	r3, #32
 800465e:	d867      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d05c      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x15a>
 8004664:	2b10      	cmp	r3, #16
 8004666:	d05a      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x15a>
 8004668:	e062      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6899      	ldr	r1, [r3, #8]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f000 f987 	bl	800498c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800468c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	609a      	str	r2, [r3, #8]
      break;
 8004696:	e04f      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6899      	ldr	r1, [r3, #8]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f000 f970 	bl	800498c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ba:	609a      	str	r2, [r3, #8]
      break;
 80046bc:	e03c      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f000 f8e4 	bl	8004898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2150      	movs	r1, #80	; 0x50
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f93d 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 80046dc:	e02c      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f000 f903 	bl	80048f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2160      	movs	r1, #96	; 0x60
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f92d 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 80046fc:	e01c      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	461a      	mov	r2, r3
 800470c:	f000 f8c4 	bl	8004898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2140      	movs	r1, #64	; 0x40
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f91d 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 800471c:	e00c      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f000 f914 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 800472e:	e003      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      break;
 8004734:	e000      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004748:	7bfb      	ldrb	r3, [r7, #15]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	fffeff88 	.word	0xfffeff88

08004758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a40      	ldr	r2, [pc, #256]	; (800486c <TIM_Base_SetConfig+0x114>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004776:	d00f      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3d      	ldr	r2, [pc, #244]	; (8004870 <TIM_Base_SetConfig+0x118>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00b      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a3c      	ldr	r2, [pc, #240]	; (8004874 <TIM_Base_SetConfig+0x11c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d007      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3b      	ldr	r2, [pc, #236]	; (8004878 <TIM_Base_SetConfig+0x120>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3a      	ldr	r2, [pc, #232]	; (800487c <TIM_Base_SetConfig+0x124>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d108      	bne.n	80047aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2f      	ldr	r2, [pc, #188]	; (800486c <TIM_Base_SetConfig+0x114>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d02b      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b8:	d027      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <TIM_Base_SetConfig+0x118>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d023      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2b      	ldr	r2, [pc, #172]	; (8004874 <TIM_Base_SetConfig+0x11c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01f      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a2a      	ldr	r2, [pc, #168]	; (8004878 <TIM_Base_SetConfig+0x120>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01b      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a29      	ldr	r2, [pc, #164]	; (800487c <TIM_Base_SetConfig+0x124>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d017      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a28      	ldr	r2, [pc, #160]	; (8004880 <TIM_Base_SetConfig+0x128>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a27      	ldr	r2, [pc, #156]	; (8004884 <TIM_Base_SetConfig+0x12c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00f      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a26      	ldr	r2, [pc, #152]	; (8004888 <TIM_Base_SetConfig+0x130>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00b      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a25      	ldr	r2, [pc, #148]	; (800488c <TIM_Base_SetConfig+0x134>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a24      	ldr	r2, [pc, #144]	; (8004890 <TIM_Base_SetConfig+0x138>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a23      	ldr	r2, [pc, #140]	; (8004894 <TIM_Base_SetConfig+0x13c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a0a      	ldr	r2, [pc, #40]	; (800486c <TIM_Base_SetConfig+0x114>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_Base_SetConfig+0xf8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a0c      	ldr	r2, [pc, #48]	; (800487c <TIM_Base_SetConfig+0x124>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d103      	bne.n	8004858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	615a      	str	r2, [r3, #20]
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40010400 	.word	0x40010400
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800
 800488c:	40001800 	.word	0x40001800
 8004890:	40001c00 	.word	0x40001c00
 8004894:	40002000 	.word	0x40002000

08004898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 030a 	bic.w	r3, r3, #10
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 0210 	bic.w	r2, r3, #16
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	031b      	lsls	r3, r3, #12
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	f043 0307 	orr.w	r3, r3, #7
 8004978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	609a      	str	r2, [r3, #8]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	021a      	lsls	r2, r3, #8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	609a      	str	r2, [r3, #8]
}
 80049c0:	bf00      	nop
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e06d      	b.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a30      	ldr	r2, [pc, #192]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d004      	beq.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2f      	ldr	r2, [pc, #188]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d108      	bne.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d022      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a56:	d01d      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d018      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1a      	ldr	r2, [pc, #104]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00e      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a15      	ldr	r2, [pc, #84]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d009      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a16      	ldr	r2, [pc, #88]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a15      	ldr	r2, [pc, #84]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d10c      	bne.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40010400 	.word	0x40010400
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40000800 	.word	0x40000800
 8004adc:	40000c00 	.word	0x40000c00
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40001800 	.word	0x40001800

08004ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e040      	b.n	8004b7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fc fe10 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2224      	movs	r2, #36	; 0x24
 8004b14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f82c 	bl	8004b84 <UART_SetConfig>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e022      	b.n	8004b7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa84 	bl	800504c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fb0b 	bl	8005190 <UART_CheckIdleState>
 8004b7a:	4603      	mov	r3, r0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4ba6      	ldr	r3, [pc, #664]	; (8004e48 <UART_SetConfig+0x2c4>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	6979      	ldr	r1, [r7, #20]
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a94      	ldr	r2, [pc, #592]	; (8004e4c <UART_SetConfig+0x2c8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d120      	bne.n	8004c42 <UART_SetConfig+0xbe>
 8004c00:	4b93      	ldr	r3, [pc, #588]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d816      	bhi.n	8004c3c <UART_SetConfig+0xb8>
 8004c0e:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <UART_SetConfig+0x90>)
 8004c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c14:	08004c25 	.word	0x08004c25
 8004c18:	08004c31 	.word	0x08004c31
 8004c1c:	08004c2b 	.word	0x08004c2b
 8004c20:	08004c37 	.word	0x08004c37
 8004c24:	2301      	movs	r3, #1
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e150      	b.n	8004ecc <UART_SetConfig+0x348>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e14d      	b.n	8004ecc <UART_SetConfig+0x348>
 8004c30:	2304      	movs	r3, #4
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e14a      	b.n	8004ecc <UART_SetConfig+0x348>
 8004c36:	2308      	movs	r3, #8
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e147      	b.n	8004ecc <UART_SetConfig+0x348>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e144      	b.n	8004ecc <UART_SetConfig+0x348>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a83      	ldr	r2, [pc, #524]	; (8004e54 <UART_SetConfig+0x2d0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d132      	bne.n	8004cb2 <UART_SetConfig+0x12e>
 8004c4c:	4b80      	ldr	r3, [pc, #512]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b0c      	cmp	r3, #12
 8004c58:	d828      	bhi.n	8004cac <UART_SetConfig+0x128>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <UART_SetConfig+0xdc>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004cad 	.word	0x08004cad
 8004c68:	08004cad 	.word	0x08004cad
 8004c6c:	08004cad 	.word	0x08004cad
 8004c70:	08004ca1 	.word	0x08004ca1
 8004c74:	08004cad 	.word	0x08004cad
 8004c78:	08004cad 	.word	0x08004cad
 8004c7c:	08004cad 	.word	0x08004cad
 8004c80:	08004c9b 	.word	0x08004c9b
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004cad 	.word	0x08004cad
 8004c8c:	08004cad 	.word	0x08004cad
 8004c90:	08004ca7 	.word	0x08004ca7
 8004c94:	2300      	movs	r3, #0
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e118      	b.n	8004ecc <UART_SetConfig+0x348>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e115      	b.n	8004ecc <UART_SetConfig+0x348>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e112      	b.n	8004ecc <UART_SetConfig+0x348>
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e10f      	b.n	8004ecc <UART_SetConfig+0x348>
 8004cac:	2310      	movs	r3, #16
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e10c      	b.n	8004ecc <UART_SetConfig+0x348>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a68      	ldr	r2, [pc, #416]	; (8004e58 <UART_SetConfig+0x2d4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d120      	bne.n	8004cfe <UART_SetConfig+0x17a>
 8004cbc:	4b64      	ldr	r3, [pc, #400]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cc6:	2b30      	cmp	r3, #48	; 0x30
 8004cc8:	d013      	beq.n	8004cf2 <UART_SetConfig+0x16e>
 8004cca:	2b30      	cmp	r3, #48	; 0x30
 8004ccc:	d814      	bhi.n	8004cf8 <UART_SetConfig+0x174>
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d009      	beq.n	8004ce6 <UART_SetConfig+0x162>
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d810      	bhi.n	8004cf8 <UART_SetConfig+0x174>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <UART_SetConfig+0x15c>
 8004cda:	2b10      	cmp	r3, #16
 8004cdc:	d006      	beq.n	8004cec <UART_SetConfig+0x168>
 8004cde:	e00b      	b.n	8004cf8 <UART_SetConfig+0x174>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e0f2      	b.n	8004ecc <UART_SetConfig+0x348>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e0ef      	b.n	8004ecc <UART_SetConfig+0x348>
 8004cec:	2304      	movs	r3, #4
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e0ec      	b.n	8004ecc <UART_SetConfig+0x348>
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e0e9      	b.n	8004ecc <UART_SetConfig+0x348>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e0e6      	b.n	8004ecc <UART_SetConfig+0x348>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a56      	ldr	r2, [pc, #344]	; (8004e5c <UART_SetConfig+0x2d8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d120      	bne.n	8004d4a <UART_SetConfig+0x1c6>
 8004d08:	4b51      	ldr	r3, [pc, #324]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d12:	2bc0      	cmp	r3, #192	; 0xc0
 8004d14:	d013      	beq.n	8004d3e <UART_SetConfig+0x1ba>
 8004d16:	2bc0      	cmp	r3, #192	; 0xc0
 8004d18:	d814      	bhi.n	8004d44 <UART_SetConfig+0x1c0>
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d009      	beq.n	8004d32 <UART_SetConfig+0x1ae>
 8004d1e:	2b80      	cmp	r3, #128	; 0x80
 8004d20:	d810      	bhi.n	8004d44 <UART_SetConfig+0x1c0>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <UART_SetConfig+0x1a8>
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d006      	beq.n	8004d38 <UART_SetConfig+0x1b4>
 8004d2a:	e00b      	b.n	8004d44 <UART_SetConfig+0x1c0>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	77fb      	strb	r3, [r7, #31]
 8004d30:	e0cc      	b.n	8004ecc <UART_SetConfig+0x348>
 8004d32:	2302      	movs	r3, #2
 8004d34:	77fb      	strb	r3, [r7, #31]
 8004d36:	e0c9      	b.n	8004ecc <UART_SetConfig+0x348>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e0c6      	b.n	8004ecc <UART_SetConfig+0x348>
 8004d3e:	2308      	movs	r3, #8
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e0c3      	b.n	8004ecc <UART_SetConfig+0x348>
 8004d44:	2310      	movs	r3, #16
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e0c0      	b.n	8004ecc <UART_SetConfig+0x348>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a44      	ldr	r2, [pc, #272]	; (8004e60 <UART_SetConfig+0x2dc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d125      	bne.n	8004da0 <UART_SetConfig+0x21c>
 8004d54:	4b3e      	ldr	r3, [pc, #248]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d62:	d017      	beq.n	8004d94 <UART_SetConfig+0x210>
 8004d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d68:	d817      	bhi.n	8004d9a <UART_SetConfig+0x216>
 8004d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6e:	d00b      	beq.n	8004d88 <UART_SetConfig+0x204>
 8004d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d74:	d811      	bhi.n	8004d9a <UART_SetConfig+0x216>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <UART_SetConfig+0x1fe>
 8004d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7e:	d006      	beq.n	8004d8e <UART_SetConfig+0x20a>
 8004d80:	e00b      	b.n	8004d9a <UART_SetConfig+0x216>
 8004d82:	2300      	movs	r3, #0
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e0a1      	b.n	8004ecc <UART_SetConfig+0x348>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e09e      	b.n	8004ecc <UART_SetConfig+0x348>
 8004d8e:	2304      	movs	r3, #4
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e09b      	b.n	8004ecc <UART_SetConfig+0x348>
 8004d94:	2308      	movs	r3, #8
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e098      	b.n	8004ecc <UART_SetConfig+0x348>
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e095      	b.n	8004ecc <UART_SetConfig+0x348>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <UART_SetConfig+0x2e0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d125      	bne.n	8004df6 <UART_SetConfig+0x272>
 8004daa:	4b29      	ldr	r3, [pc, #164]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004db8:	d017      	beq.n	8004dea <UART_SetConfig+0x266>
 8004dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dbe:	d817      	bhi.n	8004df0 <UART_SetConfig+0x26c>
 8004dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc4:	d00b      	beq.n	8004dde <UART_SetConfig+0x25a>
 8004dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dca:	d811      	bhi.n	8004df0 <UART_SetConfig+0x26c>
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <UART_SetConfig+0x254>
 8004dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd4:	d006      	beq.n	8004de4 <UART_SetConfig+0x260>
 8004dd6:	e00b      	b.n	8004df0 <UART_SetConfig+0x26c>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e076      	b.n	8004ecc <UART_SetConfig+0x348>
 8004dde:	2302      	movs	r3, #2
 8004de0:	77fb      	strb	r3, [r7, #31]
 8004de2:	e073      	b.n	8004ecc <UART_SetConfig+0x348>
 8004de4:	2304      	movs	r3, #4
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	e070      	b.n	8004ecc <UART_SetConfig+0x348>
 8004dea:	2308      	movs	r3, #8
 8004dec:	77fb      	strb	r3, [r7, #31]
 8004dee:	e06d      	b.n	8004ecc <UART_SetConfig+0x348>
 8004df0:	2310      	movs	r3, #16
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e06a      	b.n	8004ecc <UART_SetConfig+0x348>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1b      	ldr	r2, [pc, #108]	; (8004e68 <UART_SetConfig+0x2e4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d138      	bne.n	8004e72 <UART_SetConfig+0x2ee>
 8004e00:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e0e:	d017      	beq.n	8004e40 <UART_SetConfig+0x2bc>
 8004e10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e14:	d82a      	bhi.n	8004e6c <UART_SetConfig+0x2e8>
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1a:	d00b      	beq.n	8004e34 <UART_SetConfig+0x2b0>
 8004e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e20:	d824      	bhi.n	8004e6c <UART_SetConfig+0x2e8>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <UART_SetConfig+0x2aa>
 8004e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2a:	d006      	beq.n	8004e3a <UART_SetConfig+0x2b6>
 8004e2c:	e01e      	b.n	8004e6c <UART_SetConfig+0x2e8>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e04b      	b.n	8004ecc <UART_SetConfig+0x348>
 8004e34:	2302      	movs	r3, #2
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e048      	b.n	8004ecc <UART_SetConfig+0x348>
 8004e3a:	2304      	movs	r3, #4
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e045      	b.n	8004ecc <UART_SetConfig+0x348>
 8004e40:	2308      	movs	r3, #8
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e042      	b.n	8004ecc <UART_SetConfig+0x348>
 8004e46:	bf00      	nop
 8004e48:	efff69f3 	.word	0xefff69f3
 8004e4c:	40011000 	.word	0x40011000
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40004400 	.word	0x40004400
 8004e58:	40004800 	.word	0x40004800
 8004e5c:	40004c00 	.word	0x40004c00
 8004e60:	40005000 	.word	0x40005000
 8004e64:	40011400 	.word	0x40011400
 8004e68:	40007800 	.word	0x40007800
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e02c      	b.n	8004ecc <UART_SetConfig+0x348>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a72      	ldr	r2, [pc, #456]	; (8005040 <UART_SetConfig+0x4bc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d125      	bne.n	8004ec8 <UART_SetConfig+0x344>
 8004e7c:	4b71      	ldr	r3, [pc, #452]	; (8005044 <UART_SetConfig+0x4c0>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e8a:	d017      	beq.n	8004ebc <UART_SetConfig+0x338>
 8004e8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e90:	d817      	bhi.n	8004ec2 <UART_SetConfig+0x33e>
 8004e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e96:	d00b      	beq.n	8004eb0 <UART_SetConfig+0x32c>
 8004e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9c:	d811      	bhi.n	8004ec2 <UART_SetConfig+0x33e>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <UART_SetConfig+0x326>
 8004ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea6:	d006      	beq.n	8004eb6 <UART_SetConfig+0x332>
 8004ea8:	e00b      	b.n	8004ec2 <UART_SetConfig+0x33e>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	77fb      	strb	r3, [r7, #31]
 8004eae:	e00d      	b.n	8004ecc <UART_SetConfig+0x348>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e00a      	b.n	8004ecc <UART_SetConfig+0x348>
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e007      	b.n	8004ecc <UART_SetConfig+0x348>
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e004      	b.n	8004ecc <UART_SetConfig+0x348>
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	77fb      	strb	r3, [r7, #31]
 8004ec6:	e001      	b.n	8004ecc <UART_SetConfig+0x348>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed4:	d15b      	bne.n	8004f8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ed6:	7ffb      	ldrb	r3, [r7, #31]
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d828      	bhi.n	8004f2e <UART_SetConfig+0x3aa>
 8004edc:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <UART_SetConfig+0x360>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f11 	.word	0x08004f11
 8004eec:	08004f19 	.word	0x08004f19
 8004ef0:	08004f2f 	.word	0x08004f2f
 8004ef4:	08004f1f 	.word	0x08004f1f
 8004ef8:	08004f2f 	.word	0x08004f2f
 8004efc:	08004f2f 	.word	0x08004f2f
 8004f00:	08004f2f 	.word	0x08004f2f
 8004f04:	08004f27 	.word	0x08004f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f08:	f7fe faa2 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8004f0c:	61b8      	str	r0, [r7, #24]
        break;
 8004f0e:	e013      	b.n	8004f38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f10:	f7fe fab2 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 8004f14:	61b8      	str	r0, [r7, #24]
        break;
 8004f16:	e00f      	b.n	8004f38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f18:	4b4b      	ldr	r3, [pc, #300]	; (8005048 <UART_SetConfig+0x4c4>)
 8004f1a:	61bb      	str	r3, [r7, #24]
        break;
 8004f1c:	e00c      	b.n	8004f38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f1e:	f7fe f985 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8004f22:	61b8      	str	r0, [r7, #24]
        break;
 8004f24:	e008      	b.n	8004f38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2a:	61bb      	str	r3, [r7, #24]
        break;
 8004f2c:	e004      	b.n	8004f38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	77bb      	strb	r3, [r7, #30]
        break;
 8004f36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d074      	beq.n	8005028 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	005a      	lsls	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	085b      	lsrs	r3, r3, #1
 8004f48:	441a      	add	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	d916      	bls.n	8004f88 <UART_SetConfig+0x404>
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f60:	d212      	bcs.n	8004f88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f023 030f 	bic.w	r3, r3, #15
 8004f6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	89fb      	ldrh	r3, [r7, #14]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	89fa      	ldrh	r2, [r7, #14]
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	e04f      	b.n	8005028 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	77bb      	strb	r3, [r7, #30]
 8004f8c:	e04c      	b.n	8005028 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f8e:	7ffb      	ldrb	r3, [r7, #31]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d828      	bhi.n	8004fe6 <UART_SetConfig+0x462>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x418>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	08004fe7 	.word	0x08004fe7
 8004fac:	08004fd7 	.word	0x08004fd7
 8004fb0:	08004fe7 	.word	0x08004fe7
 8004fb4:	08004fe7 	.word	0x08004fe7
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08004fdf 	.word	0x08004fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7fe fa46 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8004fc4:	61b8      	str	r0, [r7, #24]
        break;
 8004fc6:	e013      	b.n	8004ff0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fe fa56 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 8004fcc:	61b8      	str	r0, [r7, #24]
        break;
 8004fce:	e00f      	b.n	8004ff0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd0:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <UART_SetConfig+0x4c4>)
 8004fd2:	61bb      	str	r3, [r7, #24]
        break;
 8004fd4:	e00c      	b.n	8004ff0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7fe f929 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8004fda:	61b8      	str	r0, [r7, #24]
        break;
 8004fdc:	e008      	b.n	8004ff0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe2:	61bb      	str	r3, [r7, #24]
        break;
 8004fe4:	e004      	b.n	8004ff0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	77bb      	strb	r3, [r7, #30]
        break;
 8004fee:	bf00      	nop
    }

    if (pclk != 0U)
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d018      	beq.n	8005028 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	085a      	lsrs	r2, r3, #1
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	441a      	add	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b0f      	cmp	r3, #15
 800500e:	d909      	bls.n	8005024 <UART_SetConfig+0x4a0>
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005016:	d205      	bcs.n	8005024 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60da      	str	r2, [r3, #12]
 8005022:	e001      	b.n	8005028 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005034:	7fbb      	ldrb	r3, [r7, #30]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40007c00 	.word	0x40007c00
 8005044:	40023800 	.word	0x40023800
 8005048:	00f42400 	.word	0x00f42400

0800504c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01a      	beq.n	8005162 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800514a:	d10a      	bne.n	8005162 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  }
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af02      	add	r7, sp, #8
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051a0:	f7fc fc62 	bl	8001a68 <HAL_GetTick>
 80051a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d10e      	bne.n	80051d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f831 	bl	800522a <UART_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e027      	b.n	8005222 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d10e      	bne.n	80051fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f81b 	bl	800522a <UART_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e011      	b.n	8005222 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b09c      	sub	sp, #112	; 0x70
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4613      	mov	r3, r2
 8005238:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523a:	e0a7      	b.n	800538c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	f000 80a3 	beq.w	800538c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005246:	f7fc fc0f 	bl	8001a68 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005252:	429a      	cmp	r2, r3
 8005254:	d302      	bcc.n	800525c <UART_WaitOnFlagUntilTimeout+0x32>
 8005256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005258:	2b00      	cmp	r3, #0
 800525a:	d13f      	bne.n	80052dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800526a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005270:	667b      	str	r3, [r7, #100]	; 0x64
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800527c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005280:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e6      	bne.n	800525c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3308      	adds	r3, #8
 8005294:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	663b      	str	r3, [r7, #96]	; 0x60
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e5      	bne.n	800528e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e068      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d050      	beq.n	800538c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f8:	d148      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005302:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005318:	66fb      	str	r3, [r7, #108]	; 0x6c
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005322:	637b      	str	r3, [r7, #52]	; 0x34
 8005324:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e6      	bne.n	8005304 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	613b      	str	r3, [r7, #16]
   return(result);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	66bb      	str	r3, [r7, #104]	; 0x68
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3308      	adds	r3, #8
 8005354:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005356:	623a      	str	r2, [r7, #32]
 8005358:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	69f9      	ldr	r1, [r7, #28]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	61bb      	str	r3, [r7, #24]
   return(result);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e5      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e010      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4013      	ands	r3, r2
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	429a      	cmp	r2, r3
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	f43f af48 	beq.w	800523c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3770      	adds	r7, #112	; 0x70
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b8:	b084      	sub	sp, #16
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	f107 001c 	add.w	r0, r7, #28
 80053c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d120      	bne.n	8005412 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	4b20      	ldr	r3, [pc, #128]	; (8005464 <USB_CoreInit+0xac>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d105      	bne.n	8005406 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa96 	bl	8005938 <USB_CoreReset>
 800540c:	4603      	mov	r3, r0
 800540e:	73fb      	strb	r3, [r7, #15]
 8005410:	e010      	b.n	8005434 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa8a 	bl	8005938 <USB_CoreReset>
 8005424:	4603      	mov	r3, r0
 8005426:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	2b01      	cmp	r3, #1
 8005438:	d10b      	bne.n	8005452 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f043 0206 	orr.w	r2, r3, #6
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800545e:	b004      	add	sp, #16
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	ffbdffbf 	.word	0xffbdffbf

08005468 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f023 0201 	bic.w	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	460b      	mov	r3, r1
 8005494:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d115      	bne.n	80054d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054b8:	2001      	movs	r0, #1
 80054ba:	f7fc fae1 	bl	8001a80 <HAL_Delay>
      ms++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fa29 	bl	800591c <USB_GetMode>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d01e      	beq.n	800550e <USB_SetCurrentMode+0x84>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b31      	cmp	r3, #49	; 0x31
 80054d4:	d9f0      	bls.n	80054b8 <USB_SetCurrentMode+0x2e>
 80054d6:	e01a      	b.n	800550e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d115      	bne.n	800550a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054ea:	2001      	movs	r0, #1
 80054ec:	f7fc fac8 	bl	8001a80 <HAL_Delay>
      ms++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa10 	bl	800591c <USB_GetMode>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <USB_SetCurrentMode+0x84>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b31      	cmp	r3, #49	; 0x31
 8005506:	d9f0      	bls.n	80054ea <USB_SetCurrentMode+0x60>
 8005508:	e001      	b.n	800550e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e005      	b.n	800551a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b32      	cmp	r3, #50	; 0x32
 8005512:	d101      	bne.n	8005518 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005524:	b084      	sub	sp, #16
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800553e:	2300      	movs	r3, #0
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	e009      	b.n	8005558 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	3340      	adds	r3, #64	; 0x40
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	2200      	movs	r2, #0
 8005550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	3301      	adds	r3, #1
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b0e      	cmp	r3, #14
 800555c:	d9f2      	bls.n	8005544 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800555e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11c      	bne.n	800559e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005572:	f043 0302 	orr.w	r3, r3, #2
 8005576:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e005      	b.n	80055aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055b0:	461a      	mov	r2, r3
 80055b2:	2300      	movs	r3, #0
 80055b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055bc:	4619      	mov	r1, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c4:	461a      	mov	r2, r3
 80055c6:	680b      	ldr	r3, [r1, #0]
 80055c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d10c      	bne.n	80055ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d104      	bne.n	80055e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055d6:	2100      	movs	r1, #0
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f965 	bl	80058a8 <USB_SetDevSpeed>
 80055de:	e008      	b.n	80055f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055e0:	2101      	movs	r1, #1
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f960 	bl	80058a8 <USB_SetDevSpeed>
 80055e8:	e003      	b.n	80055f2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055ea:	2103      	movs	r1, #3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f95b 	bl	80058a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055f2:	2110      	movs	r1, #16
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f8f3 	bl	80057e0 <USB_FlushTxFifo>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f91f 	bl	8005848 <USB_FlushRxFifo>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	461a      	mov	r2, r3
 800561c:	2300      	movs	r3, #0
 800561e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005626:	461a      	mov	r2, r3
 8005628:	2300      	movs	r3, #0
 800562a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	461a      	mov	r2, r3
 8005634:	2300      	movs	r3, #0
 8005636:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	e043      	b.n	80056c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005654:	d118      	bne.n	8005688 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005668:	461a      	mov	r2, r3
 800566a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e013      	b.n	800569a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	461a      	mov	r2, r3
 8005680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e008      	b.n	800569a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	461a      	mov	r2, r3
 8005696:	2300      	movs	r3, #0
 8005698:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a6:	461a      	mov	r2, r3
 80056a8:	2300      	movs	r3, #0
 80056aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b8:	461a      	mov	r2, r3
 80056ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	3301      	adds	r3, #1
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d3b7      	bcc.n	800563e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056ce:	2300      	movs	r3, #0
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	e043      	b.n	800575c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ea:	d118      	bne.n	800571e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fe:	461a      	mov	r2, r3
 8005700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e013      	b.n	8005730 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	461a      	mov	r2, r3
 8005716:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	e008      	b.n	8005730 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	461a      	mov	r2, r3
 800572c:	2300      	movs	r3, #0
 800572e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	461a      	mov	r2, r3
 800573e:	2300      	movs	r3, #0
 8005740:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	461a      	mov	r2, r3
 8005750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005754:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	3301      	adds	r3, #1
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	d3b7      	bcc.n	80056d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005776:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005784:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f043 0210 	orr.w	r2, r3, #16
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699a      	ldr	r2, [r3, #24]
 800579c:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <USB_DevInit+0x2b4>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f043 0208 	orr.w	r2, r3, #8
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d105      	bne.n	80057c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <USB_DevInit+0x2b8>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057d4:	b004      	add	sp, #16
 80057d6:	4770      	bx	lr
 80057d8:	803c3800 	.word	0x803c3800
 80057dc:	40000004 	.word	0x40000004

080057e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3301      	adds	r3, #1
 80057f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4a13      	ldr	r2, [pc, #76]	; (8005844 <USB_FlushTxFifo+0x64>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e01b      	b.n	8005838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	daf2      	bge.n	80057ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	019b      	lsls	r3, r3, #6
 8005810:	f043 0220 	orr.w	r2, r3, #32
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3301      	adds	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4a08      	ldr	r2, [pc, #32]	; (8005844 <USB_FlushTxFifo+0x64>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e006      	b.n	8005838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b20      	cmp	r3, #32
 8005834:	d0f0      	beq.n	8005818 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	00030d40 	.word	0x00030d40

08005848 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4a11      	ldr	r2, [pc, #68]	; (80058a4 <USB_FlushRxFifo+0x5c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e018      	b.n	8005898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	daf2      	bge.n	8005854 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2210      	movs	r2, #16
 8005876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3301      	adds	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <USB_FlushRxFifo+0x5c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e006      	b.n	8005898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b10      	cmp	r3, #16
 8005894:	d0f0      	beq.n	8005878 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	00030d40 	.word	0x00030d40

080058a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c8:	4313      	orrs	r3, r2
 80058ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058f4:	f023 0303 	bic.w	r3, r3, #3
 80058f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005908:	f043 0302 	orr.w	r3, r3, #2
 800590c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	f003 0301 	and.w	r3, r3, #1
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3301      	adds	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a13      	ldr	r2, [pc, #76]	; (800599c <USB_CoreReset+0x64>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e01b      	b.n	800598e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	daf2      	bge.n	8005944 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f043 0201 	orr.w	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3301      	adds	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <USB_CoreReset+0x64>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d901      	bls.n	8005980 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e006      	b.n	800598e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d0f0      	beq.n	800596e <USB_CoreReset+0x36>

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	00030d40 	.word	0x00030d40

080059a0 <__libc_init_array>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	4d0d      	ldr	r5, [pc, #52]	; (80059d8 <__libc_init_array+0x38>)
 80059a4:	4c0d      	ldr	r4, [pc, #52]	; (80059dc <__libc_init_array+0x3c>)
 80059a6:	1b64      	subs	r4, r4, r5
 80059a8:	10a4      	asrs	r4, r4, #2
 80059aa:	2600      	movs	r6, #0
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	d109      	bne.n	80059c4 <__libc_init_array+0x24>
 80059b0:	4d0b      	ldr	r5, [pc, #44]	; (80059e0 <__libc_init_array+0x40>)
 80059b2:	4c0c      	ldr	r4, [pc, #48]	; (80059e4 <__libc_init_array+0x44>)
 80059b4:	f000 f820 	bl	80059f8 <_init>
 80059b8:	1b64      	subs	r4, r4, r5
 80059ba:	10a4      	asrs	r4, r4, #2
 80059bc:	2600      	movs	r6, #0
 80059be:	42a6      	cmp	r6, r4
 80059c0:	d105      	bne.n	80059ce <__libc_init_array+0x2e>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c8:	4798      	blx	r3
 80059ca:	3601      	adds	r6, #1
 80059cc:	e7ee      	b.n	80059ac <__libc_init_array+0xc>
 80059ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d2:	4798      	blx	r3
 80059d4:	3601      	adds	r6, #1
 80059d6:	e7f2      	b.n	80059be <__libc_init_array+0x1e>
 80059d8:	08005a78 	.word	0x08005a78
 80059dc:	08005a78 	.word	0x08005a78
 80059e0:	08005a78 	.word	0x08005a78
 80059e4:	08005a7c 	.word	0x08005a7c

080059e8 <memset>:
 80059e8:	4402      	add	r2, r0
 80059ea:	4603      	mov	r3, r0
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d100      	bne.n	80059f2 <memset+0xa>
 80059f0:	4770      	bx	lr
 80059f2:	f803 1b01 	strb.w	r1, [r3], #1
 80059f6:	e7f9      	b.n	80059ec <memset+0x4>

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
